[
    [
        {
            "question": "Let us consider algorithm decide(n, x) , where n  is a natural number (1 ‚â§ n ‚â§ 10000) and x is an array with n  integers  (x[1], x[2], ..., x[n], -100 ‚â§ x [i] ‚â§ 100, for  i  = 1, 2, ..., n ): In which of the following conditions will the algorithm return True ? ",
            "answers": [
                {
                    "A": "If array x has elements 1, 2, 3, ‚Ä¶, 10."
                },
                {
                    "B": "If array x is strictly increasing."
                },
                {
                    "C": "If array x contains no negative elements."
                },
                {
                    "D": "If array x has positive elements before the negative ones."
                }
            ],
            "code": "Algorithm decide(n, x):\n    b ‚Üê True\n    i ‚Üê 1\n    While b = True AND i < n execute\n        If  x[i] < x[i + 1] then\n            b ‚Üê True\n        else\n            b ‚Üê False\n        EndIf\n        i ‚Üê i + 1\n    EndWhile\n    return  b\nEndAlgorithm",
            "index": 1
        },
        {
            "question": "Let us consider a natural number that does not contain any digits equal to zero, given by array a (a[1], a[2], ..., a[ n]) that contains its n  digits (1 ‚â§ n ‚â§ 10  at the initial call ). State w hich of the following algorithms return True  if a number provided in this form is a palindrome and False  otherwise. A number is a palindrome if its value when read from left to right is equal to its value when read from right to left. ",
            "answers": [
                {
                    "A": "Algorithm palindrom_1(a, n):\ni ‚Üê 1\nj ‚Üê n\nk ‚Üê True\nWhile (i ‚â§ j) AND (k = True) execute\nIf  a[i] = a[j] then\ni ‚Üê i + 1\nj ‚Üê j - 1\nelse\nk ‚Üê False\nEndIf\nEndWhile\nreturn  k\nEndAlgorithm"
                },
                {
                    "B": "Algorithm translatare(a, n):\n    For i = 1, n -  1 execute\n        a[i] ‚Üê a[i + 1]\n    EndFor\nEndAlgorithm\n\nAlgorithm palindrom_2(a, n):\nj ‚Üê n\nIf (j = 0) OR (j = 1) then\nreturn  True\nEndIf\nIf a[1] = a[j] then\ntranslatare(a, n)\nreturn  palindrom_2(a, n - 2)\nEndIf\nreturn  False\nEndAlgorithm\n\n2"
                },
                {
                    "C": "Algorithm palindrom_3(a, n):\n    i ‚Üê n\n    j ‚Üê 1\n    k ‚Üê True\n    sum1 ‚Üê 0\n    sum2 ‚Üê 0\n    While (i > n DIV 2) AND (j ‚â§ n DIV  2)\nexecute\n        sum1 ‚Üê sum1 + a[i]\n        sum2 ‚Üê sum2 + a[j]\n        i ‚Üê i - 1\n        j ‚Üê j + 1\n    EndWhile\n    If sum1 = sum2 then\n        k ‚Üê True\n    else\n        k ‚Üê False\n    EndIf\n    return  k\nEndAlgorithm"
                },
                {
                    "D": "Algorithm palindrom_4(a, n):\ni ‚Üê 1\nj ‚Üê n\nk ‚Üê True\nWhile (i ‚â§ j) AND (k = True) execute\nIf  (a[i] = a[j]) AND (i MOD 2 = 0)\nAND (j MOD 2 = 0) then\ni ‚Üê i + 1\nj ‚Üê j - 1\nelse\nk ‚Üê False\nEndIf\nEndWhile\nreturn  k\nEndAlgorithm"
                }
            ],
            "code": "",
            "index": 2
        },
        {
            "question": "Let us consider algorithm F(n), where n  is a natural number (1 ‚â§ n ‚â§ 109). State which of the following statements are correct: ",
            "answers": [
                {
                    "A": "If n = 812376, the algorithm returns 6."
                },
                {
                    "B": "If n = 8237631, the algorithm returns 1."
                },
                {
                    "C": "If n = 4868, the algorithm returns 8."
                },
                {
                    "D": "If n = 51, the algorithm returns 0."
                }
            ],
            "code": "Algorithm F(n):\n    If n < 10 then\n        return  n\n    EndIf\n    u ‚Üê n MOD 10\n    p ‚Üê F(n DIV 10)\n    If u MOD 5 ‚â§ p MOD 5 then\n        return  u\n    EndIf\n    return  p\nEndAlgorithm",
            "index": 3
        },
        {
            "question": "Let us consider algorithm f(n), where the parameter n  is a natural number (1 ‚â§ n  ‚â§ 109). 3 Which of the following statements are true? ",
            "answers": [
                {
                    "A": "The algorithm returns the number of digits of number n."
                },
                {
                    "B": "The algorithm returns the number of occurrences of the digit with the largest value in number n ."
                },
                {
                    "C": "The algorithm returns one of the digits with the greatest number of occurrences in the number n ."
                },
                {
                    "D": "The al gorithm returns the number of digits that have the greatest number of occurrences in the\nnumber n ."
                }
            ],
            "code": "Algorithm f(n):\nv ‚Üê 0; z ‚Üê 0;\nFor c ‚Üê 0, 9 execute\nx ‚Üê n\nk ‚Üê 0\nWhile x > 0 execute\nIf  x MOD 10 = c then\nk ‚Üê k + 1\nEndIf\nx ‚Üê x DIV 10\nEndWhile\nIf  k > v then\nv ‚Üê k\nz ‚Üê c\nEndIf\nEndFor\nreturn  z\nEndAlgorithm",
            "index": 4
        },
        {
            "question": "Which of the following algorithms prints the binary representation of natural number x (0 < x ‚â§ 109 at the initial call) that is provided as a parameter? ",
            "answers": [
                {
                    "A": "Algorithm imp(x):\n    If x = 0 then\n        r ‚Üê x MOD 2\n        imp(x DIV 2)\n        write r\n    EndIf\nEndAlgorithm"
                },
                {
                    "C": "Algorithm imp(x):\nIf x = 0 then\nr ‚Üê x DIV 2\nimp(x DIV 2)\nwrite r\nEndIf\nEndAlgorithm"
                },
                {
                    "B": "Algorithm imp(x):\n    If x ‚â† 0 then\n        r ‚Üê x MOD 2\n        imp(x DIV 2)\n        write r\n    EndIf\nEndAlgorithm"
                },
                {
                    "D": "Algorithm imp(x):\nIf x ‚â† 0 then\nr ‚Üê x MOD 2\nimp(x)\nwrite r\nEndIf\nEndAlgorithm"
                }
            ],
            "code": "",
            "index": 5
        },
        {
            "question": "Which of the following statements regarding the algorithms in problem statement 5 are true? ",
            "answers": [
                {
                    "A": "During the execution of the algorithm from option A nothing is printed."
                },
                {
                    "B": "The algorithm from option B will not call itself recursively for any valid value of parame ter x"
                },
                {
                    "C": "The algorithm from option C would be correct if we replace d \"=\" with \"‚â†\""
                },
                {
                    "D": "The algorithm from option D would be correct, if we replace d \"imp(x) \" with \"imp(x DIV 2)\"."
                }
            ],
            "code": "",
            "index": 6
        },
        {
            "question": "Let us consider the integer numbers a and b (-1000 ‚â§ a, b ‚â§ 1000) and the expression: NOT ((a > 0) AND (b > 0)) . Which of the following expressions are equivalent to the given expression? ",
            "answers": [
                {
                    "A": "(NOT (a < 0)) AND (NOT (b < 0))"
                },
                {
                    "B": "(a ‚â§ 0) AND (b ‚â§ 0)"
                },
                {
                    "C": "(NOT (a > 0)) OR (NOT (b > 0))"
                },
                {
                    "D": "NOT ((a > 0) OR  (b < 0))"
                }
            ],
            "code": "",
            "index": 7
        },
        {
            "question": "Let us consider algorithm s(n), where n  is a natural number (2 ‚â§ n  ‚â§ 10). The operator / denotes real division (ex. 3 / 2 = 1,5). Which of the following sums are returned by the algorithm? ",
            "answers": [
                {
                    "A": "‚àë1\nùëòùëò!ùëõùëõ\nùëòùëò=0"
                },
                {
                    "B": "‚àë1\nùëòùëòùëõùëõùëòùëò=0"
                },
                {
                    "C": "‚àë1\nùëòùëò!ùëõùëõ‚àí1ùëòùëò=0"
                },
                {
                    "D": "‚àë1\nùëòùëò!ùëõùëõùëòùëò=1  4"
                }
            ],
            "code": "Algorithm s(n):\n    p ‚Üê 1\n    x ‚Üê 0\n    For k = 0, n - 1 execute\n        p ‚Üê p * (k + 1)\n        x ‚Üê x + 1 / p\n    EndFor\n    return  x\nEndAlgorithm",
            "index": 8
        },
        {
            "question": " 9. Let us consider algorithm ceFace(n) , where n is a positive natural number (1 ‚â§  n ‚â§ 10000). Which of the following statements are true : ",
            "answers": [
                {
                    "A": "For n  = 125 the algorithm returns 521."
                },
                {
                    "B": "The algorithm ceFace(n)  returns the mirrored value of n."
                },
                {
                    "C": "For n  = 125 the algorithm returns 155."
                },
                {
                    "D": "For n  = 340 the algorithm returns 40."
                }
            ],
            "code": "Algorithm ceFace(n):\nm ‚Üê 0\np ‚Üê 10\nWhile p < n execute\nr ‚Üê n MOD p\nm ‚Üê m + r\np ‚Üê p * 10\nEndWhile\nreturn m\nEndAlgorithm",
            "index": 9
        },
        {
            "question": "Let us consider algorithm f(v, n) , where n  is a non -zero natural number (1 ‚â§ n ‚â§ 10000) and v is an array with n positive natural numbers ( v[1], v[2], ..., v[n]). Assume that the algorithm  prim(d)  returns True  if d (natural number) is prime and False  otherwise. Which of the following statements are true? ",
            "answers": [
                {
                    "A": "The algorithm returns the number of distinct proper prime divisors of all numbers from array\nv."
                },
                {
                    "B": "The algorithm returns the product of the prime divisors of the numbers from array v."
                },
                {
                    "C": "The algorithm returns the number of prime numbers from array v ."
                },
                {
                    "D": "The algorit hm returns the total number of divisors of all the numbers from array v."
                }
            ],
            "code": "Algorithm f(v, n):\n    x ‚Üê 1\n    a ‚Üê 0\n    For i ‚Üê 1, n execute\n        For d ‚Üê 2, (v[i] DIV 2) execute\n            If (prim(d) = True) AND (v[i] MOD d = 0) then\n                x ‚Üê x * d\n            EndIf\n        EndFor\n    EndFor\n    For d ‚Üê 2, (x DIV 2) execute\n        If (x MOD d = 0) AND (prim(d) = True) then\n            a ‚Üê a + 1\n        EndIf\n    EndFor\n    return a\nEndAlgorithm",
            "index": 10
        },
        {
            "question": "Let us consider algorithm f(n), where n  is a natural number ( 0 < n ‚â§ 109 at the initial call) . The local variable v is an array.   5 Which of the following statements are true? ",
            "answers": [
                {
                    "A": "The algorithm returns the greatest number that can be obtained using the digits of n."
                },
                {
                    "B": "The algorithm returns the greatest power of 10 that is a divisor of n ."
                },
                {
                    "C": "The algorithm returns the first (leftmost) digit of number n ."
                },
                {
                    "D": "The algorithm returns the sum of the digits of number n."
                }
            ],
            "code": "Algorithm f(n):\nm ‚Üê 0\nWhile n > 0 execute\nm ‚Üê m + 1\nv[m] ‚Üê n MOD 10\nn ‚Üê n DIV 10\nEndWhile\nx ‚Üê 0\nmx ‚Üê 0\nWhile mx > -1 execute\nx ‚Üê x * 10 + mx\nmx ‚Üê -1\nj ‚Üê 1\nFor i = 1, m execute\nIf v[i] > mx then\nj ‚Üê i\nmx ‚Üê v[i]\nEndIf\nEndFor\nv[j] ‚Üê -1\nEndWhile\nreturn x\nEndAlgorithm",
            "index": 11
        },
        {
            "question": "Let us consider algorithm f(n), where parameter n  is a natural number (1  ‚â§ n ‚â§ 10002 at the initial call).   What is the returned value if the algorithm is called with n  = 103456? ",
            "answers": [
                {
                    "A": "639"
                },
                {
                    "B": "963"
                },
                {
                    "C": "693"
                },
                {
                    "D": "369"
                }
            ],
            "code": "Algorithm f(n):\n    z ‚Üê 0; p ‚Üê 1;\n    While n ‚â† 0 execute\n        c ‚Üê n MOD 10\n        n ‚Üê n DIV 10\n        If  c MOD 3 = 0 then\n            z ‚Üê z + p * (9 ‚Äì  c)\n            p ‚Üê p * 10\n        EndIf\n    EndWhile\n    return  z\nEndAlgorithm",
            "index": 12
        },
        {
            "question": "Let us consider algorithm f(n) given in problem statement 12, but now parameter n is a natural number with two digits (10 ‚â§ n  ‚â§ 99 at the initial call ). Which of the following options contain only numbers for which the algorithm returns 3? ",
            "answers": [
                {
                    "A": "61, 65, 67"
                },
                {
                    "B": "62, 66, 68"
                },
                {
                    "C": "16, 56, 76"
                },
                {
                    "D": "26, 66, 86  6"
                }
            ],
            "code": "",
            "index": 13
        },
        {
            "question": " 14. Let us consider algorithm ceFace(a, b) , where a and b are positive natural numbers  (1 ‚â§ a, b ‚â§ 10000). If a = 600, for what values of b will the execution of algorithm ceFace(a, b)  print 4 numbers: ",
            "answers": [
                {
                    "A": "b = 20"
                },
                {
                    "B": "b = 50"
                },
                {
                    "C": "b = 12"
                },
                {
                    "D": "b = 90"
                }
            ],
            "code": "Algorithm ceFace(a, b):\nFor i ‚Üê 2, a, 2 execute\nIf a MOD i = 0 then\nIf  b MOD i = 0 then\nWrite i\nWrite new line\nEndIf\nEndIf\nEndFor\nEndAlgorithm",
            "index": 14
        },
        {
            "question": "Which of the following statements are true  about the algorithm in problem statement 14? ",
            "answers": [
                {
                    "A": "The algorithm prints the common divisors of a  and b."
                },
                {
                    "B": "The algorithm prints the common proper divisors of a and b."
                },
                {
                    "C": "The algorithm prints the common odd divisors of a and b."
                },
                {
                    "D": "The algorithm prints the common even divisors of a  and b."
                }
            ],
            "code": "",
            "index": 15
        },
        {
            "question": "Let us consider a program that generates, in ascending order, all natural numbers containing exactly 5 distinct digits that can be formed using the digits: 2, 3, 4, 5, 6. Specify which number is generated immediately before the following sequence and whi ch number is generated immediately after the following sequence: 34256, 34265, 34526, 34562. ",
            "answers": [
                {
                    "A": "32645 and 34625"
                },
                {
                    "B": "32654 and 34655"
                },
                {
                    "C": "32654 and 34625"
                },
                {
                    "D": "32645 and 34655"
                }
            ],
            "code": "",
            "index": 16
        },
        {
            "question": "Let array x = (1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, ...), which is continued according to the rule that can be observed from the elements that have been enumerated. Consider ing that the first element of the array is on position 1, which of the following sub sequences will contain only the value 11? ",
            "answers": [
                {
                    "A": "x[100], ..., x [109]"
                },
                {
                    "B": "x[113], ..., x [120]"
                },
                {
                    "C": "x[140], ..., x [152]"
                },
                {
                    "D": "x[123], ..., x [132]"
                }
            ],
            "code": "",
            "index": 17
        },
        {
            "question": "How many of the first 100 elements of array x from problem statement 17 are prime numbers? ",
            "answers": [
                {
                    "A": "4"
                },
                {
                    "B": "34"
                },
                {
                    "C": "36"
                },
                {
                    "D": "30"
                }
            ],
            "code": "",
            "index": 18
        },
        {
            "question": "Let us consider the natural numbers a and n (1 ‚â§ a, n ‚â§ 1000) , array V  with n natural numbers as elements ( V[1], V [2], ..., V [n]) and algorithms one(a, n, V)  and two(a, n, V) : Algorithm two(a, n, V):     p ‚Üê 1; i ‚Üê 1;     While i ‚â§ n execute         If  a > V[i] then             p ‚Üê p + 1         EndIf         i ‚Üê i + 1     EndWhile     return  p EndAlgorithm  What property should vector V have, such that, for any n  and V  with the given property, the two algorithms will return equal values for any value of a ? 7 ",
            "answers": [
                {
                    "A": "All elements of array V are equal."
                },
                {
                    "B": "All elements of array V  are distinct and sorted in ascending order."
                },
                {
                    "C": "All elements of array V  are distinct and sorted in descending order."
                },
                {
                    "D": "All elements o f array V  are sorted in ascending order but are not necessarily distinct."
                }
            ],
            "code": "Algorithm one(a, n, V):\n    p ‚Üê 1; i ‚Üê 1;\n    While (i ‚â§ n) AND (a > V[p]) execute\n        p ‚Üê p + 1\n        i ‚Üê i + 1\n    EndWhile\n    return  p\nEndAlgorithm",
            "index": 19
        },
        {
            "question": "Let us consider algorithm suma(n)  where n  is a natural number (0 < n  ‚â§ 10000  at the initial call ). Which of the following statements are NOT  true? ",
            "answers": [
                {
                    "A": "The algorithm returns the value n  + 1"
                },
                {
                    "B": "The algorithm calculates and returns the sum of the proper divisors of n"
                },
                {
                    "C": "The call suma(1)  returns 2"
                },
                {
                    "D": "The algorithm calculates and returns the double of the integer part of the arithmetic mean of the\nfirst n  natural numbers"
                }
            ],
            "code": "Algorithm suma(n):\nIf n = 0 then\nreturn 0\nelse\nreturn  suma(n - 1) + n DIV  (n + 1) + (n + 1) DIV n\nEndIf\nEndAlgorithm",
            "index": 20
        },
        {
            "question": "Consider the following algorithm , having as input parameters the natural numbers a and b (0 ‚â§  a, b ‚â§ 10000 at the initial call ): Which of the following statements are true? ",
            "answers": [
                {
                    "A": "The algorithm returns the sum of numbers a and b."
                },
                {
                    "B": "The algorithm returns the non- zero number x after the call ceFace(x, 0)  or ceFace(0, x) , and\nreturns 0 for the call ceFace(0, 0) ."
                },
                {
                    "C": "The algorithm returns the greatest common divisor of numbers a and b ."
                },
                {
                    "D": "The algorithm returns  a raised to the power b."
                }
            ],
            "code": "Algorithm ceFace(a, b):\n    While a * b ‚â† 0 execute\n        If  a > b then\n            return  ceFace(a MOD b, b)\n        else\n            return  ceFace(a, b MOD  a)\n        EndIf\n    EndWhile\n    return  a + b\nEndAlgorithm",
            "index": 21
        },
        {
            "question": "Let us consider algorithm afi»ôare(n)  where n  is a natural number ( 1 ‚â§ n ‚â§ 109): 8 How many pairs of numbers will be displayed when executing the algorithm for n  = 7? ",
            "answers": [
                {
                    "A": "21"
                },
                {
                    "B": "15"
                },
                {
                    "C": "11"
                },
                {
                    "D": "17"
                }
            ],
            "code": "Algorithm afi»ôare(n):\nFor i = 1, n ‚Äì  1 execute\nFor j = i + 1, n  execute\nIf  (j ‚Äì i) < (n DIV 2) then\nWrite i, \" \", j ‚Äì  i\nWrite new line\nelse\nIf  (j ‚Äì i) ‚â† (n DIV 2) then\nWrite j ‚Äì i, \" \", i\nWrite new line\nEndIf\nEndIf\nEndFor\nEndFor\nEndAlgorithm",
            "index": 22
        },
        {
            "question": "C onsider ing the following code sequence, determine how many times the UBB character sequence will be printed, knowing that n  = 3k, where k is a natural number (1 ‚â§ k ‚â§ 30)? j ‚Üê n While j > 1 execute i ‚Üê 1 While i ‚â§ n execute i ‚Üê 3 * i Write 'UBB' EndWhile j ‚Üê j DIV 3 EndWhile   ",
            "answers": [
                {
                    "A": "k2"
                },
                {
                    "B": "k * 3k"
                },
                {
                    "C": "k * ( k+1)"
                },
                {
                    "D": "3 * k"
                }
            ],
            "code": "",
            "index": 23
        },
        {
            "question": "Consider the following code sequences and the natural numbers i , j, a, b (1  < a, b ‚â§ 109). Sequence 1 (S1) i ‚Üê 1 While i ‚â† b execute j ‚Üê 1 While j ‚â† a execute Write '*' j ‚Üê j + 1 EndWhile i ‚Üê i + 1 EndWhile  Sequence 2 (S2) i ‚Üê 1 While i ‚â† a execute j ‚Üê 1 While j ‚â† b execute Write '*' j ‚Üê j + 1 EndWhile i ‚Üê i + 1 EndWhile Which of the following statements are true? ",
            "answers": [
                {
                    "A": "The number of characters printed by sequence S1 is different than the number of characters\nprinted by sequence S2."
                },
                {
                    "B": "Both sequences have the same time complexity."
                },
                {
                    "C": "The number of characters printed by sequence S1  is (a ‚Äì 1) * ( b ‚Äì 1)."
                },
                {
                    "D": "The number of characters printed by sequence S2  is a * b."
                }
            ],
            "code": "",
            "index": 24
        },
        {
            "question": "Let us consider algorithm ceFace(nr) , where nr  is a natural number (100 ‚â§  nr ‚â§ 2*109 at the initial call). Algorithm ceFace(nr):     s ‚Üê 0     c1 ‚Üê nr MOD 10     nr ‚Üê nr DIV 10     c2 ‚Üê nr MOD 10     nr ‚Üê nr DIV 10     While nr ‚â† 0 execute         c3 ‚Üê nr MOD 10         t ‚Üê c3 * 100 + c2 * 10 + c1         If  testProprietateNr(t) then             s ‚Üê s + c1 + c2 + c3         EndIf         c1 ‚Üê c2         c2 ‚Üê c3         nr ‚Üê nr DIV 10     EndWhile     return  s EndAlgorithm  9  What is the value returned by algorithm ceFace(nr)  for nr  = 1271211312? ",
            "answers": [
                {
                    "A": "31"
                },
                {
                    "B": "32"
                },
                {
                    "C": "33"
                },
                {
                    "D": "34"
                }
            ],
            "code": "Algorithm testProprietateNr(n):\n    If n ‚â§ 1 then\n        return  False\n    EndIf\n    d ‚Üê 2\n    While d * d ‚â§ n execute\n        If  n MOD d = 0 then\n            return  False\n        EndIf\n        d ‚Üê d + 1\n    EndWhile\n    return  True\nEndAlgorithm",
            "index": 25
        },
        {
            "question": "Which of the following algorithms correctly determines and returns the square root of the natural number  n (0 < n < 105), rounded down to the nearest integer. The / o perator denotes real division (ex. 3 / 2 = 1,5). ",
            "answers": [
                {
                    "A": "Algorithm radical_A(n):\nx ‚Üê 0\nz ‚Üê 1\nWhile z ‚â§ n execute\nx ‚Üê x + 1\nz ‚Üê z + 2 * x\nz ‚Üê z + 1\nEndWhile\nreturn  x\nEndAlgorithm"
                },
                {
                    "C": "//The algorithm is called initially\n//as radical_C(n, n)\nAlgorithm radical_C(n, x):\n    eps ‚Üê 0.001\n    y ‚Üê 0.5 * (x + n / x)\n    If x - y < eps then\n        //return the integer part\n        //of x\n        return  [x]\n    EndIf\n    return  radical_C(n, y)\nEndAlgorithm"
                },
                {
                    "B": "Algorithm radical_B(n):\ns ‚Üê 1\nd ‚Üê n DIV 2\nWhile s < d execute\nk ‚Üê (s + d) DIV  2\nIf  k * k ‚â• n then\nd ‚Üê k\nelse\ns ‚Üê k + 1\nEndIf\nEndWhile\nIf s * s ‚â§ n then\nreturn  s + 1\nelse\nreturn  s - 1\nEndIf\nEndAlgorithm"
                },
                {
                    "D": "Algorithm radical_D(n):\n    s ‚Üê 0\n    p ‚Üê 0\n    k ‚Üê 0\n    While k < n execute\n        k ‚Üê k + 3 + p\n        p ‚Üê p + 2\n        s ‚Üê s + 1\n    EndWhile\n    return  s\nEndAlgorithm"
                }
            ],
            "code": "",
            "index": 26
        },
        {
            "question": "Know ing that x is a natural number, which of the following expressions are True  if and only if x is an even number that does NOT  belong to the open interval (10, 20)? ",
            "answers": [
                {
                    "A": "NOT((x > 10) AND (x < 20)) AND (NOT (x MOD 2 = 1))"
                },
                {
                    "B": "(x MOD 2 = 0) AND ((x < 10) OR  (x > 20))"
                },
                {
                    "C": "NOT(x MOD 2 = 1) AND ((x > 10) AND  (x < 20))"
                },
                {
                    "D": "NOT((x MOD 4 = 1) OR (x MOD 4 = 3) OR ((x > 10) AND (x < 20)))"
                }
            ],
            "code": "",
            "index": 27
        },
        {
            "question": " 28. Consider an array a containing n distinct natural numbers ( a[1], a[2], ‚Ä¶, a[ n], 2 ‚â§ n ‚â§ 1000 ) in strictly ascending order. In an array, a number that is strictly greater than both the number on the previous position and the number on the next position is called a local peak . The first and last elements of an array cannot be local peaks. An algorithm is required, named rearanjare(a, n) , that rearranges the numbers from the array such that it will contain the maximum number of local peaks and return the new array. The local variable b is an array. Which of the following algorithms are correct ?  10   ",
            "answers": [
                {
                    "A": "Algorithm rearanjare(a, n):\ni ‚Üê n\nFor p ‚Üê 2, n, 2 execute\nb[p] ‚Üê a[i]\ni ‚Üê i ‚Äì 1\nEndFor\nFor p ‚Üê 1, n, 2 execute\nb[p] ‚Üê a[i]\ni ‚Üê i ‚Äì 1\nEndFor\nreturn  b\nEndAlgorithm"
                },
                {
                    "B": "Algorithm rearanjare(a, n):\n    i ‚Üê n\n    For p ‚Üê 2, n, 2 execute\n        b[p] ‚Üê a[i]\n        i ‚Üê i ‚Äì 1\n        b[p - 1] ‚Üê a[i]\n        i ‚Üê i ‚Äì 1\n    EndFor\n    If n MOD 2 = 1 then\n        b[n] ‚Üê a[i]\n    EndIf\n    return  b\nEndAlgorithm"
                },
                {
                    "C": "Algorithm rearanjare(a, n):\ni ‚Üê n\nFor p ‚Üê 2, n, 2 execute\nb[p] ‚Üê a[i]\ni ‚Üê i ‚Äì 1\nEndFor\ni ‚Üê 1\nFor p ‚Üê 1, n, 2 execute\nb[p] ‚Üê a[i]\ni ‚Üê i + 1\nEndFor\nreturn  b\nEndAlgorithm"
                },
                {
                    "D": "Algorithm rearanjare(a, n):\n    i ‚Üê n\n    For p ‚Üê 2, n, 3 execute\n        b[p] ‚Üê a[i]\n        i ‚Üê i ‚Äì 1\n        b[p - 1] ‚Üê a[i]\n        i ‚Üê i ‚Äì 1\n        If p + 1 ‚â§ n then\n            b[p + 1] ‚Üê a[i]\n            i ‚Üê i ‚Äì 1\n        EndIf\n    EndFor\n    If n MOD 3 = 1 then\n        b[n] ‚Üê a[i]\n    EndIf\n    return b\nEndAlgorithm"
                }
            ],
            "code": "",
            "index": 28
        },
        {
            "question": "Let us consider algorithm f(n, p1, p2) , where n, p1 and p2 are strictly positive natural numbers (1 < n, p1, p2 ‚â§ 104 at the initial call ). Which of the following statements are true? ",
            "answers": [
                {
                    "A": "If the three parameters have equal values ( n = p1 = p2), then the algorithm always returns the\nvalue 1."
                },
                {
                    "B": "If p1 = 5 and p2  = 5, the algorithm returns the number of 0 digits that the number n! contains\nat the end."
                },
                {
                    "C": "If p1 and p2  are equal and greater than 2, then the algorithm returns [log p1 n]."
                },
                {
                    "D": "None of the other three statements is true."
                }
            ],
            "code": "Algorithm f(n, p1, p2):\nc ‚Üê 0\nWhile p1 ‚â§ n execute\nc ‚Üê c + n DIV p1\np1 ‚Üê p1 * p2\nEndWhile\nreturn c\nEndAlgorithm",
            "index": 29
        },
        {
            "question": "Which of the following algorithms returns the number of sumative  numbers found in interval [ a, b] (0 < a < b < 106)? A non- zero natural number n  is sumative  if n2 can be written as a sum of n  consecutive non-zero natural numbers. For example, 1 and 7 are sumative  because 1 = 1, respectively 49 = 4 + 5 + 6 + 7 + 8 + 9 + 10.  11 ",
            "answers": [
                {
                    "A": "Algorithm sumative(a, b):\n    k ‚Üê 0\n    For i ‚Üê a, b execute\n        If i MOD 2 ‚â† 0 then\n            k ‚Üê k + 1\n        EndIf\n    EndFor\n    return k\nEndAlgorithm"
                },
                {
                    "B": "Algorithm sumative(a, b):\nreturn (b - a) DIV 2 + (b - a) MOD 2\n+ (a MOD 2 + b MOD 2) DIV 2\nEndAlgorithm"
                },
                {
                    "C": "Algorithm sumative(a, b):\n  k ‚Üê 0\n  For i ‚Üê a, b execute\n    i2 ‚Üê i * i\n    For j ‚Üê 2, i ‚Äì  1 execute\n      If i2 = j * i + (i * (i + 1) DIV 2) then\n        k ‚Üê k + 1\n      EndIf\n    EndFor\n  EndFor\n  return k\nEndAlgorithm"
                },
                {
                    "D": "Algorithm sumative(a, b):\nk ‚Üê 0\nFor i ‚Üê a, b execute\ni2 ‚Üê i * i\nFor j ‚Üê 2, i DIV 2 execute\nIf i2 = j * i + (i * (i + 1) DIV 2) then\nk ‚Üê k + 1\nEndIf\nEndFor\nEndFor\nreturn k\nEndAlgorithm"
                }
            ],
            "code": "",
            "index": 30
        }
    ],
    [
        {
            "question": "Let us consider the algorithm  ceFace(a, b) , where a and b are natural numbers  (1 ‚â§ a, b ‚â§ 10000  at the initial call ). The algorithm  ceFace(a, b)  returns True  if and only if : ",
            "answers": [
                {
                    "A": "a and b have the same number of digits"
                },
                {
                    "B": "a and b are equal"
                },
                {
                    "C": "a and b are written using  the same digits, but in different  sequence"
                },
                {
                    "D": "the last digit of  a is equal with the last digit of  b"
                }
            ],
            "code": "Algorithm ceFace(a, b):\n    While (a MOD 10 = b MOD 10) AND (a ‚â† 0) AND (b ‚â† 0) execute\n        a ‚Üê a DIV 10\n        b ‚Üê b DIV 10\n    EndWhile\n    If ((a = 0) AND (b = 0)) then\n        return True\n    else\n        return False\n    EndIf\nEndAlgorithm",
            "index": 1
        },
        {
            "question": "Let us consider the algorithm  f(a, n)  where  n is a natural number (2 ‚â§ n ‚â§ 10000) and a is an array of  n natural numbers  (a[1], a[2], ..., a[n], -100 ‚â§ a[i] ‚â§ 100, for i = 1, 2, ..., n). The local variable b is an array . Which of the following statements are true? ",
            "answers": [
                {
                    "A": "The algorithm returns the sum of  all elements of array a."
                },
                {
                    "B": "The algorithm returns the sum of the last two elements  of array a."
                },
                {
                    "C": "The algorithm returns the last element  of array  a."
                },
                {
                    "D": "The algorithm returns the sum of the last  n ‚Äì 1 element s of array  a.\n2"
                }
            ],
            "code": "Algorithm f(a, n):\ni ‚Üê 2\nb[1] ‚Üê a[1]\nWhile i ‚â§ n execute\nb[i] ‚Üê b[i - 1] + a[i]\ni ‚Üê i + 1\nEndWhile\nreturn b[n]\nEndAlgorithm",
            "index": 2
        },
        {
            "question": "Which of the following algorithms returns the number of distinct prime factors of a given natural number  n  (5 < n < 105 at the initial call ). ",
            "answers": [
                {
                    "A": "// The length of array prime  is n\n// prime[i] is True, if\n// the number  i is prime and False\n// otherwise\nAlgorithm nrFactoriPrimi_A(n, prime):\n    d ‚Üê 2\n    nr ‚Üê 0\n    p ‚Üê 0\n    While n > 0 execute\n        While n MOD d = 0 execute\n            p ‚Üê p + 1\n            n ‚Üê n DIV d\n        EndWhile\n        If p ‚â† 0 then\n            nr ‚Üê nr + 1\n        EndIf\n        d ‚Üê d + 1\n        While prime[d]  = False execute\n            d ‚Üê d + 1\n        EndWhile\n        p ‚Üê 0\n    EndWhile\n    return nr\nEndAlgorithm"
                },
                {
                    "C": "Algorithm nrFactoriPrimi_ C(n):\nnr ‚Üê 0\nFor d ‚Üê 2, n execute\nIf n MOD d = 0 then\nnr ‚Üê nr + 1\nEndIf\nWhile n MOD d = 0 execute\nn ‚Üê n DIV d\nEndWhile\nEndFor\nreturn nr\nEndAlgorithm"
                },
                {
                    "B": "Algorithm nrFactoriPrimi_ B(n):\n    d ‚Üê 2\n    nr ‚Üê 0\n    While n > 1 execute\n        p ‚Üê 0\n        While n MOD d = 0 execute\n            p ‚Üê p + 1\n            n ‚Üê n DIV d\n        EndWhile\n        If p > 0 then\n            nr ‚Üê nr + 1\n        EndIf\n        If d = 2 then\n            d ‚Üê d + 1\n        else\n            d ‚Üê d + 2\n        EndIf\n    EndWhile\n    return nr\nEndAlgorithm"
                },
                {
                    "D": "Algorithm nrFactoriPrimi_D(n):\nnr ‚Üê 0\nd ‚Üê 2\nWhile d * d ‚â§ n  execute\nIf n MOD d = 0 then\nnr ‚Üê nr + 1\nEndIf\nWhile n MOD d = 0 execute\nn ‚Üê n DIV d\nEndWhile\nd ‚Üê d + 1\nEndWhile\nreturn nr\nEndAlgorithm"
                }
            ],
            "code": "",
            "index": 3
        },
        {
            "question": "Let us consider the algorithm ceFace(n, m) , where  n is a natural number (0 ‚â§ n ‚â§ 1000) with the last digit not equal to  0. What is the result of the call ceFace(n, 0) ? ",
            "answers": [
                {
                    "A": "0 (regardless of the value of  n)"
                },
                {
                    "B": "n (regardless of the value of n)"
                },
                {
                    "C": "The sum of the digits of  n"
                },
                {
                    "D": "The reverse of number  n\n 3"
                }
            ],
            "code": "Algorithm ceFace(n, m):\n    If n = 0 then\n        return m\n    else\n        return ceFace(n DIV 10, m * 10 + n MOD 10)\n    EndIf\nEndAlgorithm",
            "index": 4
        },
        {
            "question": "Let us consider the algorithm  f(x, n)  where  n is a natural  number  (2 ‚â§ n ‚â§ 10000), and x is an array of n natural numbers  (x[1], x[2], ..., x[n], 1 ‚â§ x[i] ‚â§ 10000, for i = 1, 2, ..., n). Which of the following statements are true? ",
            "answers": [
                {
                    "A": "The algorithm returns False  if two random element s of the array  x are distinct ."
                },
                {
                    "B": "The algorithm returns False  if two random elements of the array x are equal."
                },
                {
                    "C": "The algorithm returns False  if two consecutive elements of the array x are equal ."
                },
                {
                    "D": "The algorithm returns False  if the first two elements of the array x are equal ."
                }
            ],
            "code": "Algorithm f(x, n):\nFor i = 1, n ‚Äì 1 execute\nIf x[i] = x[i + 1] then\nreturn False\nEndIf\nEndFor\nreturn True\nEndAlgorithm",
            "index": 5
        },
        {
            "question": "Let us consider the algorithm  f(x, n)  where  x and n are natural  numbers  (0 ‚â§ n ‚â§ 10000, 0 < x ‚â§ 10000) . Which of the following statements are true? ",
            "answers": [
                {
                    "A": "The algorithm returns x at the power of  n."
                },
                {
                    "B": "If on line 7 , we replace  n MOD 2 with m MOD 2, then the algorithm return s x at the power of  n."
                },
                {
                    "C": "Because of the recursive call on line 6, the lines  7, 8, 9, 10 will never be execu ted."
                },
                {
                    "D": "The algorithm returns  1 if n is an even number or  it returns x if n is an odd number ."
                }
            ],
            "code": "Algorithm f(x, n):\n2.     If n = 0 then\n3.         return 1\n4.     EndIf\n5.     m ‚Üê n DIV 2\n6.     p ‚Üê f(x, m)\n7.     If n MOD 2 = 0 then\n8.         return p * p\n9.     EndIf\n10.    return x * p * p\nEndAlgorithm",
            "index": 6
        },
        {
            "question": "Considering that all multipli cation s and division s require a constant  amount of time , what can be stated about the time complexity of the  algorithm  considered in problem statement 6? ",
            "answers": [
                {
                    "A": "The time complexity depend s on parameters  x and n."
                },
                {
                    "B": "The time complexity does not depend on the parameter  x."
                },
                {
                    "C": "The time complexity is  O(log log n)."
                },
                {
                    "D": "The time complexity is logarithmic based on the parameter n (O(log n))."
                }
            ],
            "code": "",
            "index": 7
        },
        {
            "question": "Let us consider the algorithm  afi»ôare(n ), where  n is a natural number  (1 ‚â§ n ‚â§ 10000) . What will be displayed for the call afi»ôare(1000) ? 4 ",
            "answers": [
                {
                    "A": "1000 2000 4000"
                },
                {
                    "B": "1000 2000 4000 4000 2000 1000"
                },
                {
                    "C": "1000 2000 4000 2000 1000"
                },
                {
                    "D": "1000 2000 2000 1000"
                }
            ],
            "code": "Algorithm afi»ôare(n):\nIf n ‚â§ 4000 then\nWrite n, \" \"\nafi»ôare(2 * n)\nWrite n, \" \"\nEndIf\nEndAlgorithm",
            "index": 8
        },
        {
            "question": "Which could be the values of an array so that, applying  the binary search method for value  36, it will be successively compared with  values  12, 24, 36: ",
            "answers": [
                {
                    "A": "[2, 4, 7, 12, 24, 36, 50]"
                },
                {
                    "B": "[2, 4, 8, 9, 12, 16, 20, 24, 36, 67]"
                },
                {
                    "C": "[4, 8, 9, 12, 16, 24, 36]"
                },
                {
                    "D": "[12, 24, 36, 42, 54, 66]"
                }
            ],
            "code": "",
            "index": 9
        },
        {
            "question": "Which of the following mathematical expressions are equivalent to  x MOD y for all strictly positive natural numbers x and y (0 < x, y ‚â§ 10000) ? ",
            "answers": [
                {
                    "A": "x DIV y"
                },
                {
                    "B": "x ‚Äì (y * (x DIV y))"
                },
                {
                    "C": "x ‚Äì (x * (x DIV y))"
                },
                {
                    "D": "x DIV y + y DIV x"
                }
            ],
            "code": "",
            "index": 10
        },
        {
            "question": "Let us consider variab le n that stores a natural  number . Which of the following expressions is True if and only if n is divisible  by 2 and by 3 ? ",
            "answers": [
                {
                    "A": "(n DIV 2 = 0) OR (n DIV 3 ‚â† 0)"
                },
                {
                    "B": "(n MOD 3 = 2) OR (n MOD 2 = 3)"
                },
                {
                    "C": "(n MOD 2 ‚â† 1) AND (n MOD 3 = 0)"
                },
                {
                    "D": "(n MOD 2 = 0) AND (n MOD 3 ‚â† 1)"
                }
            ],
            "code": "",
            "index": 11
        },
        {
            "question": "Let us consider variable n that stores a natural number.  Which of the following expressions is True if and only if n is divisible  by 2 and by 3 ? ",
            "answers": [
                {
                    "A": "(n MOD 2) - (n MOD 3) = 0"
                },
                {
                    "B": "(n MOD 2) - (n MOD 3) < 0"
                },
                {
                    "C": "(n MOD 2) + (n MOD 3) > 0"
                },
                {
                    "D": "(n MOD 2) + (n MOD 3) = 0"
                }
            ],
            "code": "",
            "index": 12
        },
        {
            "question": "Let us consider the algorithm f(n), where  n is a natural  number  (1 ‚â§ n ‚â§ 100). The o perator ‚Äù/‚Äù stands for real division  (ex. 3 / 2 =  1,5). State the effect of the  algorithm . ",
            "answers": [
                {
                    "A": "Evaluates the expression  1/1 ‚àó 1/2 ‚àó 1/3 ‚àó ... ‚àó 1/n"
                },
                {
                    "B": "Evaluates the expression  1/1 ‚àó 1/(1‚àó2) ‚àó 1/(1‚àó2‚àó3) ‚àó ... ‚àó 1/(1‚àó2‚àó3‚àó‚Ä¶‚àón)"
                },
                {
                    "C": "Evaluates the expression  1/1 ‚àó 1/(1+2) ‚àó 1/(1+2+3) ‚àó ... ‚àó 1/(1+2+3+‚Ä¶+ n)"
                },
                {
                    "D": "Evaluates the expression  1/1 + 1/(1 ‚àó2) + 1/(1‚àó2‚àó3) + ... + 1/(1 ‚àó2‚àó3‚àó‚Ä¶‚àón)"
                }
            ],
            "code": "Algorithm f(n):\n    s ‚Üê 0; p ‚Üê 1;\n    For i ‚Üê 1, n execute\n        s ‚Üê s + i\n        p ‚Üê p * (1 / s)\n    EndFor\n    return p\nEndAlgorithm",
            "index": 13
        },
        {
            "question": "Let us consider the algorithm  prelucrare(s1, lung1, s2, lung2) , where  s1 and s2 are two arrays of characters of length  lung 1, respectively  lung 2 (1 ‚â§ lung 1, lung 2 ‚â§ 1000). The two strings contain only characters  having  ASCII codes in the interval  [1, 125]. The local variable  x is an array . Let us consider the algorithm  ascii(s, i ), which returns  the ASCII code of the i-th character of array  s. 5 What is the result of the algorithm? ",
            "answers": [
                {
                    "A": "The algorithm returns  True  if the arrays of characters s1 and s2 have the same length and  False\notherwise ."
                },
                {
                    "B": "The algorithm returns  True if the arrays of characters s1 and s2 contain the same characters\nhaving the same corresponding frequency  and False  otherwise ."
                },
                {
                    "C": "The algorithm returns  True  if in both arrays of characters s1 and s2 all characters having ASCII\ncodes in the interval [1, 125] appear and False  otherwise ."
                },
                {
                    "D": "The algorithm returns  True  if the two arrays of characters  s1 and s2 use different characters and\nFalse  otherwise ."
                }
            ],
            "code": "Algorithm prelucrare(s1, lung1, s2, lung2):\nFor i = 1, 125 execute\nx[i] ‚Üê 0\nEndFor\nFor i = 1, lung1 execute\nx[ascii(s1, i)] ‚Üê x[ascii(s1, i)] + 1\nEndFor\nFor i = 1, lung2 execute\nx[ascii(s2, i)] ‚Üê x[ascii(s2, i)] - 1\nEndFor\nok ‚Üê True\nFor i = 1, 125 execute\nIf x[i] ‚â† 0 then\nok ‚Üê False\nEndIf\nEndFor\nreturn ok\nEndAlgorithm",
            "index": 14
        },
        {
            "question": "What is the result of converting the binary number  100101100111 into base  10? ",
            "answers": [
                {
                    "A": "2407"
                },
                {
                    "B": "2408"
                },
                {
                    "C": "1203"
                },
                {
                    "D": "None of the answers"
                },
                {
                    "A": ","
                },
                {
                    "B": ","
                },
                {
                    "C": ""
                }
            ],
            "code": "",
            "index": 15
        },
        {
            "question": "Let us consider an array  a of n natural numbers  (a[1], a[2], ‚Ä¶, a[n]), the natural  number  n (1 ‚â§ n ‚â§ 10000) and a natural number  x. Which of the following code sequence s display  the position having the minim al index  where the value  x is situated in the array  a, or displays -1 if x is not found  in a? ",
            "answers": [
                {
                    "A": "i ‚Üê 1\nWhile (i ‚â§ n) AND (a[i] = x) execute\ni ‚Üê i + 1\nEndWhile\nIf i ‚â§ n then\nWrite i\nelse\nWrite ‚Äì1\nEndIf"
                },
                {
                    "C": "i ‚Üê 1\nWhile (i ‚â§ n) AND (a[i] = x) execute\ni ‚Üê i + 1\nEndWhile\nIf i = n + 1 then\nWrite i\nelse\nWrite ‚Äì1\nEndIf"
                },
                {
                    "B": "i ‚Üê 1\nWhile (i ‚â§ n) AND (a[i] ‚â† x) execute\ni ‚Üê i + 1\nEndWhile\nIf i = n + 1 then\nWrite i\nelse\nWrite ‚Äì1\nEndIf"
                },
                {
                    "D": "i ‚Üê 1\nWhile (i ‚â§ n) AND (a[i] ‚â† x) execute\ni ‚Üê i + 1\nEndWhile\nIf i ‚â§ n then\nWrite i\nelse\nWrite ‚Äì1\nEndIf\n6"
                }
            ],
            "code": "",
            "index": 16
        },
        {
            "question": "Let us consider  the algorithm f(x), where  x is an integer : For which value of x does the algorit hm return the value  4? ",
            "answers": [
                {
                    "A": "13369"
                },
                {
                    "B": "21369"
                },
                {
                    "C": "4"
                },
                {
                    "D": "1233"
                }
            ],
            "code": "Algorithm f(x):\n    If x = 0 then\n        return 0\n    else\n        If x MOD 3 = 0 then\n            return f(x DIV 10) + 1\n        else\n            return f(x DIV 10)\n        EndIf\n    EndIf\nEndAlgorithm",
            "index": 17
        },
        {
            "question": "Let us consider the algorithm  f(n, i, j)  where  n, i and j are natural numbers  (1 ‚â§ n, i, j  ‚â§ 10000 at the initial call ). What will be displayed upon the execution of the call  f(15, 3, 10) ? ",
            "answers": [
                {
                    "A": "*000000"
                },
                {
                    "B": "*0#000"
                },
                {
                    "C": "*0#0000"
                },
                {
                    "D": "*0000000"
                }
            ],
            "code": "Algorithm f(n, i, j):\nIf i > j then\nWrite '*'\nelse\nIf n MOD i = 0 then\nf(n, i - 1, j)\nelse\nIf n DIV i ‚â† j then\nf(n, i + 1, j ‚Äì 1)\nWrite '0'\nelse\nf(n, i + 2, j ‚Äì 2)\nWrite '#'\nEndIf\nEndIf\nEndIf\nEndAlgorithm",
            "index": 18
        },
        {
            "question": "Let us consider algorithm ceFace(n, x) , where n is a natural number (1 ‚â§ n ‚â§ 100) and x is an array of n natural numbers ( x[1], x[2], ‚Ä¶, x[n]). What will be the new content of array x after executing the algorithm if  n = 6 and x = [5, 3, 2, 1, 1, 1 ]?  7   ",
            "answers": [
                {
                    "A": "[1, 1, 2, 1, 3, 5 ]"
                },
                {
                    "B": "[1, 1, 1, 2, 3, 5 ]"
                },
                {
                    "C": "[5, 3, 2, 1, 1, 1 ]"
                },
                {
                    "D": "None of the other options is correct."
                }
            ],
            "code": "Algorithm ceFace(n, x):\n    For i = 1, n execute\n        c ‚Üê x[i]\n        x[i] ‚Üê x[n ‚Äì i + 1]\n        x[n ‚Äì i + 1] ‚Üê c\n    EndFor\nEndAlgorithm",
            "index": 19
        },
        {
            "question": "Let us consider the algorithm  what(n) , where  n is a natural number  (1 ‚â§ n ‚â§ 1000  at the initial call). Which of the following statements are true? ",
            "answers": [
                {
                    "A": "The algorithm returns  True  if and only if  eithe r n can be written using  only the digit 3, or n can\nbe written using  only the digit 7"
                },
                {
                    "B": "The algorithm returns False  if n contains at least an even digit"
                },
                {
                    "C": "The algorithm returns False  if and only if  n contains at least one digit c where  c ‚â† 3 and c ‚â† 7"
                },
                {
                    "D": "The algorithm returns True if and only if  n does not contain any digit from the set  {0, 1, 2, 4,\n5, 6, 8, 9}\n`"
                }
            ],
            "code": "Algorithm what(n):\nIf n = 0 then\nreturn True\nEndIf\nIf (n MOD 10 = 3) OR (n MOD 10 = 7) then\nreturn what(n DIV 10)\nelse\nreturn False\nEndIf\nEndAlgorithm",
            "index": 20
        },
        {
            "question": "Let us consider the algorithm  calcul(x, n) , where  x and n are natural numb ers (1 ‚â§ x ‚â§ 10000, 1 ‚â§ n ‚â§ 10000), and x ‚â§ n. Which of the following statements are true? ",
            "answers": [
                {
                    "A": "If x = 2 and n = 5, then the algorithm returns 10."
                },
                {
                    "B": "The algorithm returns  the number of subsets having x elements from the set  {1, 2, ‚Ä¶, n}."
                },
                {
                    "C": "The algorithm returns the number of partial permutations of n element s taken x at a time ."
                },
                {
                    "D": "The algorithm returns the number of combinations of n elements  taken x at a time ."
                }
            ],
            "code": "Algorithm calcul(x, n):\n    b ‚Üê 1\n    For i ‚Üê 1, n ‚Äì x execute\n        b ‚Üê b * i\n    EndFor\n    a ‚Üê b\n    For i ‚Üê n - x + 1, n execute\n        a ‚Üê a * i\n    EndFor\n    return a DIV b\nEndAlgorithm",
            "index": 21
        },
        {
            "question": "At a farm there are chickens and rabbits, each chicken has two legs and each rabbit has four legs . The total number of heads is  n and the total number  of leg s is m (0 ‚â§ n, m ‚â§ 104). Which of the following algorithms returns  True  and displays  all possible pairs of number s of chickens and rabbits at the farm , or returns False  if there are no solutions ?  8   ",
            "answers": [
                {
                    "A": "Algorithm ferma_A(n, m):\nfound = False\nFor i ‚Üê 0, n execute\nj ‚Üê n - i\nIf 2 * i + 4 * j = m then\nfound ‚Üê True\nWrite i, ' ', j\nWrite newline\nEndIf\nEndFor\nreturn found\nEndAlgorithm"
                },
                {
                    "B": "Algorithm ferma_B(n, m):\n    found ‚Üê False\n    For i ‚Üê 0, n execute\n        For j ‚Üê 0, n execute\n            If 2 * i + 4 * j = m AND\ni + j = n then\n                found ‚Üê True\n                Write i, ' ', j\n                Write newline\n            EndIf\n        EndFor\n    EndFor\n    return found\nEndAlgorithm"
                },
                {
                    "C": "Algorithm ferma_C(n, m):\nfound ‚Üê False\nFor i ‚Üê 0, n execute\nFor j ‚Üê 0, n - i execute\nIf 2 * i + 4 * j = m AND\ni + j = n then\nfound ‚Üê True\nWrite i, ' ', j\nWrite newline\nEndIf\nEndFor\nEndFor\nreturn found\nEndAlgorithm"
                },
                {
                    "D": "Algorithm ferma_D(n, m):\n    found ‚Üê False\n    For i ‚Üê 0, n execute\n        For j ‚Üê 0, i execute\n            If 2 * i + 4 * j = m AND\ni + j = n then\n                found ‚Üê True\n                Write i, ' ', j\n                Write newline\n            EndIf\n        EndFor\n    EndFor\n    return found\nEndAlgorithm"
                }
            ],
            "code": "",
            "index": 22
        },
        {
            "question": "Let us consider  a natural number  n, which can be written as the product of three natural numbers  a, b, c, (n = a * b * c). Which of the following expressions  has as result the remainder of the division  of n by the natural number  d (1 ‚â§ n, a, b, c, d ‚â§ 10000) ? ",
            "answers": [
                {
                    "A": "(a MOD d) * b * c"
                },
                {
                    "B": "((a MOD d) * (b MOD d) * (c MOD d)) MOD d"
                },
                {
                    "C": "(a MOD d) * (b MOD d) * (c MOD d)"
                },
                {
                    "D": "(a DIV d) * (b DIV d) * (c DIV d)"
                }
            ],
            "code": "",
            "index": 23
        },
        {
            "question": "Let us consider the algorithm  det(a, n, m) , where  a is an array of  n natural numbers  (a[1], a[2], ..., a[n] if n ‚â• 1) or an empty array if  n = 0. n and m are natural number s (0 ‚â§ n ‚â§ 100 , 0 ‚â§ m ‚â§ 106). Which of the following statements are true? ",
            "answers": [
                {
                    "A": "The algorithm returns  True if array a contains  a pair o f numbers having their sum equal to m."
                },
                {
                    "B": "The algorithm always returns  False ."
                },
                {
                    "C": "The algorithm returns  False if n = 0."
                },
                {
                    "D": "Lines 2, ..., 10 of t he algorithm sort array  a in ascending order ."
                }
            ],
            "code": "Algorithm det(a, n, m):\n2.     For i ‚Üê 1, n ‚Äì 1 execute\n3.         For j ‚Üê i + 1, n execute\n4.             If a[i] > a[j] then\n5.                 tmp ‚Üê a[i]\n6.                 a[i] ‚Üê a[j]\n7.                 a[j] ‚Üê tmp\n8.             EndIf\n9.         EndFor\n10.     EndFor\n11.     i ‚Üê 1\n12.     j ‚Üê n\n13.     b ‚Üê False\n14.     While i < j execute\n15.         If a[i] + a[j] = m then\n16.             b ‚Üê True\n17.         EndIf  9\n18.         If a[i] + a[j] < m then\n19.             i ‚Üê i + 1\n20.         else\n21.             j ‚Üê j - 1\n22.         EndIf\n23.     EndWhile\n24.     return b\nEndAlgorithm",
            "index": 24
        },
        {
            "question": "Let us consider the algorithm  magic(n, a) , where  a is an array  of n natural numbers  (a[1], a[2], ..., a[n], 1 ‚â§ n ‚â§ 10000). Which of the following statements are true? ",
            "answers": [
                {
                    "A": "For magic(5, [2, 5, 4, 5, 4])  the algorithm returns  False ."
                },
                {
                    "B": "The algorithm indicates if there are duplicates in the array a, if and only if  array  a is sorted\nascending/ descending ."
                },
                {
                    "C": "For magic(9, [1, 2, 3, 4, 4, 5, 6, 7, 9])  the algorithm returns  True."
                },
                {
                    "D": "For magic(5, [9, 5, 5, 2, 4])  the algorithm returns  True."
                }
            ],
            "code": "Algorithm magic(n, a):\n    If n < 2 then\n        return False\n    EndIf\n    For i ‚Üê 2, n execute\n        If a[i ‚Äì 1] = a[i] then\n            return True\n        EndIf\n    EndFor\n    return False\nEndAlgorithm",
            "index": 25
        },
        {
            "question": "Let us consider the algorithm  f(n, a, b, c)  where  n is a natural number  (n ‚â§ 20) and a, b, c three integer numbers . What is the return value of the call  f(n, 1, 1, 2) ? ",
            "answers": [
                {
                    "A": "2n+1 ‚Äì 1"
                },
                {
                    "B": "n"
                },
                {
                    "C": "20 + 21 + 22 + ... + 2n"
                },
                {
                    "D": "2n+1\n\n10"
                }
            ],
            "code": "Algorithm f(n, a, b, c):\nIf n = 0 then\nreturn 1\nelse\nreturn f(n - 1, a * a, b + 1, c * 2) +  f(n - 1, a - 1, b * b, c + 1) + 1\nEndIf\nEndAlgorithm",
            "index": 26
        },
        {
            "question": "Let us consider the algorithms  f(n, p)  and g(n), where  n and p are initially natural numbers  (1 ‚â§ n, p ‚â§ 106 at the initial call ). Algorithm f(n, p):     If n = 0 then         return 1     EndIf     If n > 0 AND n ‚â• p then         c ‚Üê 0         If g(p) = True then             c ‚Üê c + f(n - p, p + 1)         EndIf         return c + f(n, p + 1)     EndIf     return 0 EndAlgorithm Which of the following statements are true? ",
            "answers": [
                {
                    "A": "The algorithm  g(n) returns  True  if n is prime and False  otherwise ."
                },
                {
                    "B": "The call  f(n, 2)  returns the number of distinct ways of writing n as a sum of at least one term\nof distinct prime numbers in strictly ascending  order ."
                },
                {
                    "C": "The call  f(n, 2)  returns the sum of the prime divisors of n."
                },
                {
                    "D": "The calls  f(n, 1 ) and f(n, 2)  will return the same result , regardless of  n."
                }
            ],
            "code": "Algorithm g(n):\n    If n < 2 then\n        return False\n    EndIf\n    i ‚Üê 2\n    While i * i ‚â§ n execute\n        If n MOD i = 0 then\n            return False\n        EndIf\n        i ‚Üê i + 1\n    EndWhile\n    return True\nEndAlgorithm",
            "index": 27
        },
        {
            "question": "Let us consider the algorith m AlexB(value, n, k, p) , where  value  is an array of  n natural numbers (value [1], value [2], ..., value [n]), and n, k and p are natural numbers . Initially the array  value  has n elements equal  to zero. The algorithm  afi»ôare(value, n)  displays the array  value  on a single line . What will be displayed  on the 10th  line, if n = 5 and the algorithm is called like:  AlexB(value, 5, 1, 0) . ",
            "answers": [
                {
                    "A": "1 5 2 3 4"
                },
                {
                    "B": "1 5 4 0 4"
                },
                {
                    "C": "5 5 5 5 5"
                },
                {
                    "D": "1 2 5 4 3"
                }
            ],
            "code": "Algorithm AlexB(value, n, k, p):\np ‚Üê p + 1\nvalue[k] ‚Üê p\nIf p = n then\nafi»ôare(value, n)\nelse\nFor i ‚Üê 1, n execute\nIf value[i] = 0 then\nAlexB(value, n, i, p)\nEndIf\nEndFor\nEndIf\np ‚Üê p - 1\nvalue[k] ‚Üê 0\nEndAlgorithm",
            "index": 28
        },
        {
            "question": "Let us consider the algorithm  f(n) where  n is a natural number  (1 ‚â§ n ‚â§ 10000  at the initial call ).  11  The & operator  is the bitwise  AND operator ; the truth table is : & 0 1 0 0 0 1 0 1  Example : 2 & 7 in binary : 010 & 111 = 010 which is  2 in base  10. 6 & 1 in binary : 110 & 001 = 000 which  is 0 in base  10. Which of the following statements are NOT true? ",
            "answers": [
                {
                    "A": "If n is a power of  2, then f(n) returns value  1."
                },
                {
                    "B": "If n >16 and n < 32, then f(n) returns a value  from  the {2, 3, 4,  5} set."
                },
                {
                    "C": "The algorithm returns the number of even numbers strictly smaller than  n."
                },
                {
                    "D": "The algorithm returns the number of odd numbers smaller than n."
                }
            ],
            "code": "Algorithm f(n):\n    c ‚Üê 0\n    If n ‚â† 0 then\n        c ‚Üê c + 1\n        n ‚Üê n & (n - 1)       // bitwise AND\n        While n ‚â† 0 execute\n            c ‚Üê c + 1\n            n ‚Üê n & (n - 1)   // bitwise AND\n        EndWhile\n    EndIf\n    return c\nEndAlgoritm",
            "index": 29
        },
        {
            "question": "Let us consider algorithm calcul(v, n) , where n is a non zero natural number (1 ‚â§ n ‚â§ 10000) and v is an array of n integer numbers ( v[1], v[2], ..., v[n]). The instruction return x, y returns the pair of values ( x, y). Which of the following statements are true? ",
            "answers": [
                {
                    "A": "If the array contains only one element, the algorithm returns 0, -1"
                },
                {
                    "B": "If n = 2 and the array‚Äôs  two elements are symmetric with respect to 0 (for example -5, 5), the\nresult will be -1, 1"
                },
                {
                    "C": "If n = 2 and the array‚Äôs  two elements have  consecutive values  (for example 3, 4) , the\nalgorithm will always return the values 1, 2"
                },
                {
                    "D": "One of the numbers returned by the algorithm represents the length of the longest sequence\ncontaining equal values from the second half of the array for any even number n > 1"
                }
            ],
            "code": "Algorithm calcul(v, n):\ni ‚Üê n DIV 2 + 1\nj ‚Üê i + 1\nk ‚Üê i\np ‚Üê j\nWhile j ‚â§ n execute\nWhile (j ‚â§ n) AND (v[i] = v[j]) execute\nj ‚Üê j + 1\nEndWhile\nIf j - i > p - k then\nk ‚Üê i\np ‚Üê j\nEndIf\ni ‚Üê j\nj ‚Üê j + 1\nEndWhile\nIf j - i > p - k then\nk ‚Üê i\np ‚Üê j\nEndIf\nreturn p - k, k\nEndAlgorithm",
            "index": 30
        }
    ],
    "1 \n UNIVERSITATEA BABE≈û -BOLYAI  \nFACULTATEA DE MATEMATICƒÇ ≈ûI INFORMATICƒÇ  \nConcurs de admitere ‚Äì 9 septembrie  2021 \nProba scrisƒÉ la InformaticƒÉ  \n \n1. Se considerƒÉ subalgoritmul ceFace(n) , unde n este un numƒÉr natural (1 ‚â§ n ‚â§ 10000).   \n \nSubalgoritm ceFace(n) : \n    nr ‚Üê 0  \n    Pentru d ‚Üê 1, n executƒÉ  \n        DacƒÉ n MOD d = 0 atunci  \n            nr ‚Üê nr + 1  \n        SfDacƒÉ  \n    SfPentru  \n    DacƒÉ nr = 2 atunci  \n      returneazƒÉ adevƒÉrat  \n    altfel  \n      returneazƒÉ fals  \n    SfDacƒÉ  \nSfSubalgoritm  \n \nPreciza»õi care dintre urmƒÉtoarele afirma»õii sunt adevƒÉrate:  \n \nA. Subalgoritmul returneazƒÉ adevƒÉrat  dacƒÉ numƒÉrul n este impar.  \nB. Subalgoritmul returneazƒÉ adevƒÉrat  dacƒÉ numƒÉrul n este par.  \nC. Subalgoritmul returneazƒÉ adevƒÉrat  dacƒÉ numƒÉrul n este prim.  \nD. Subalgoritmul returneazƒÉ adevƒÉrat  dacƒÉ numƒÉrul n este pƒÉtrat perfect.  \n \n \n2.   »òtiind cƒÉ x < y (x »ôi y sunt numere reale), care din urmƒÉtoarele expresii are valoarea adevƒÉrat  dacƒÉ \n»ôi numai dacƒÉ numƒÉrul memorat √Æn t (t numƒÉr real) NU apar»õine intervalului ( x, y)? \n \nA. (t > x) SAU (t < y) \nB. (t ‚â§ x) SAU (t ‚â• y)  C. (t ‚â§ x) »òI (t ‚â• y)  \nD. (t > x) »òI (t < y)  \n \n \n3.   Fie subalgoritmul  f(n)  unde n este un numƒÉr natural  (1 ‚â§ n ‚â§ 10000) . \n \nSubalgoritm f(n):  \n    r ‚Üê 0  \n    C√¢tTimp n > 0 executƒÉ  \n        r ‚Üê r + (n MOD 10) * (n MOD 2) \n        n ‚Üê n DIV 10 \n    SfC√¢tTimp  \n    returneazƒÉ r \nSfSubalgoritm  \n \nAlege»õi variantele care completeazƒÉ corect spa»õiul subliniat din subalgoritmul de mai jos astfel √Ænc√¢t cei \ndoi subalgoritmi sƒÉ return eze mereu ace ea»ôi valoare . \n  \nSubalgoritm fr(n):  \n    DacƒÉ n > 0 atunci  \n        returneazƒÉ _________________  \n    SfDacƒÉ  \n    returneazƒÉ 0 \nSfSubalgoritm  \n \nA. (n MOD 2) * (n MOD 10) + fr(n DIV 10) \nB. (n MOD 2) * (n MOD 10) * fr(n DIV 10) \nC. (n MOD 10) + fr(n DIV 10) \nD. (n MOD 2) * (n MOD 10) + fr(n MOD 10) 2 \n  \n4. Fie subalgoritmul  f(n)  unde n este un numƒÉr natural (1 ‚â§ n ‚â§ 10000) . \n \nSubalgoritm f(n):  \nPentru i ‚Üê 1, n executƒÉ \n    Pentru j ‚Üê 1, 2 * i - 1 executƒÉ  \nScrie '*' \n    SfPentru  \nSfPentru  \n SfSubalgoritm  \n \nPreciza»õi care dintre urmƒÉtoarele afirma»õii sunt adevƒÉrate:  \n \nA. Pentru n = 3 subalgoritmul afi»ôeazƒÉ 3 stelu »õe \nB. Pentru n = 3 subalgoritmul afi»ôeazƒÉ  9 stelu »õe \nC. Pentru ca subalgoritmul sƒÉ afi»ôeze 1154 de stelu »õe valoarea lui n trebuie s ƒÉ fie 34  \nD. Pentru ca subalgoritmul sƒÉ afi»ôeze 289 de stelu »õe valoarea lui n trebuie s ƒÉ fie 17  \n \n \n5.  Subalgoritmul de mai jos are ca parametri de intrare un vector v cu n numere naturale ( v[1], v[2], \n‚Ä¶, v[n]) »ôi numƒÉrul √Æntreg n (2 ‚â§ n ‚â§ 10000). Operatorul / reprezintƒÉ √ÆmpƒÉr»õirea realƒÉ (ex. 3/2=1,5 ). \nVectorul v con»õine cel pu»õin un numƒÉr par »ôi cel pu»õin un numƒÉr impar.  \n \nSubalgoritm  fn(v, n):  \n    a ‚Üê 0  \n    b ‚Üê 0  \n    Pentru i ‚Üê 1, n executƒÉ  \n        DacƒÉ v[i] MOD 2 = 0 atunci  \n            a ‚Üê a + v[i]  \n            b ‚Üê b + 1  \n        SfDacƒÉ  \n    SfPentru  \n    returneazƒÉ  a / b  \nSfSubalgoritm  \n \nPreciza»õi care dintre urmƒÉtoarele afirma»õii sunt adevƒÉrate:  \n \nA. Subalgoritmul return eazƒÉ numƒÉrul de elemente pare din vectorul v \nB. Subalgoritmul return eazƒÉ media elementelor pare din vectorul v \nC. Subalgoritmul return eazƒÉ suma elementelor pare din vectorul v \nD. Subalgoritmul return eazƒÉ media elementelor impare din vectorul v \n \n \n6.  Subalgoritmul de mai jos are ca parametri de intrare un vector v cu n numere naturale ( v[1], v[2], ‚Ä¶, \nv[n]) »ôi numƒÉrul √Æntreg n (1 ‚â§ n ‚â§ 10000).   \n \nSubalgoritm fn(v, n):  \n    a ‚Üê 0  \n    Pentru i ‚Üê 1, n executƒÉ  \n        ok ‚Üê 1  \n        b ‚Üê v[i]  \n        C√¢tTimp (b ‚â† 0) »òI (ok = 1) executƒÉ  \n            DacƒÉ b MOD 2 = 0 atunci  \n                ok ‚Üê 0  \n            SfDacƒÉ  \n            b ‚Üê b DIV 10 \n        SfC√¢tTimp \n        DacƒÉ ok = 1 atunci  \n            a ‚Üê a + v[i]  \n        SfDacƒÉ  \n    SfPentru  \n    returneazƒÉ a \nSfSubalgoritm  3 \n  \nPreciza»õi care dintre urmƒÉtoarele afirma»õii sunt adevƒÉrate:  \n \nA. Subalgoritmul return eazƒÉ suma elementelor impare din vectorul v \nB. Subalgoritmul returneazƒÉ  suma elementelor din vectorul v care sunt puteri ale lui 2  \nC. Subalgoritmul returneazƒÉ  suma elementelor din vectorul v care au √Æn componen »õa lor doar cifre \npare \nD. Subalgoritmul returneazƒÉ  suma elementelor din vectorul v care au √Æn componen »õa lor doar cifre \nimpare  \n \n7.   Preciza»õi care dintre urmƒÉtorii subalgoritmi calculeazƒÉ modulul (valoarea absolutƒÉ) unui numƒÉr \n√Æntreg. Vom presupune cƒÉ o expresie logicƒÉ are valoarea 1 dacƒÉ este adevƒÉratƒÉ »ôi 0 dacƒÉ este falsƒÉ.  \n \n \n \nA.  \nSubalgoritm modul(n):  \n    returneazƒÉ  n * (-2 * (n < 0) + 1)  \nSfSubalgoritm  \n \n  \nB.   \nSubalgoritm  modul(n):  \n    DacƒÉ n < 0 atunci  \n        returneazƒÉ  n * (-1) \n    SfDacƒÉ  \n    returneazƒÉ  n \nSfSubalgoritm  \n C.  \nSubalgoritm modul(n):  \n    DacƒÉ n < 0 atunci  \n        returneazƒÉ  n * (-1) \n    altfel  \n        returneazƒÉ  n \n    SfDacƒÉ  \nSfSubalgoritm  \n \nD.   \nSubalgoritm  modul(n):  \n    DacƒÉ n > 0 atunci  \n        returneazƒÉ  n * (-1) \n    altfel  \n        returneazƒÉ  n \n    SfDacƒÉ  \nSfSubalgoritm  \n \n \n \n8. Care este valoarea expresiei de mai jos, dacƒÉ x = 15 »ôi y = 17?  \n \n(NU (x MOD 10 = 0)) »òI (y MOD 2 = 0) »òI (x < y)  \n \nA. adevƒÉrat           B. fals          C. Eroare          D. Expresia nu poate fi evaluatƒÉ  \n \n \n9.   Se considerƒÉ subalgoritmul recursiv  ceFace(n, i) , unde n este un numƒÉr natural (2 ‚â§ n ‚â§ 1000).   \n \nSubalgoritm ceFace(n, i):  \n    DacƒÉ i = 1 atunci  \n        returneazƒÉ i \n    altfel  \n   DacƒÉ n MOD i = 0 atunci  \n            returneazƒÉ i + ceFace(n, i - 1) \n        altfel  \n            returneazƒÉ ceFace(n, i - 1)  \n        SfDacƒÉ  \n    SfDacƒÉ  \nSfSubalgoritm  \n \nPreciza»õi care dintre urmƒÉtoarele afirma»õii sunt adevƒÉrate pentru  apelul ceFace(n, n ). \n \nA. Subalgoritmul returneazƒÉ succesorul celui mai mare divizor al lui n \nB. Subalgoritmul returneazƒÉ suma numerelor naturale neprime, p√¢nƒÉ la n inclusiv  \nC. Subalgoritmul returneazƒÉ suma divizorilor proprii ai numƒÉrului n \nD. Subalgoritmul returneazƒÉ suma divizorilor proprii »ôi improprii ai numƒÉrului n \n \n10.   Subalgoritmul  magic(s, n) are ca parametri de intrare un »ôir s cu n caractere ( s[1], s[2], ‚Ä¶, s[n]) \n»ôi numƒÉrul √Æntreg n (1 ‚â§ n ‚â§ 10000).   \n 4 \n Subalgoritm magic(s, n) :  \n   i ‚Üê 1  \n   f ‚Üê 1  \n    C√¢tTimp i ‚â§ n DIV 2 executƒÉ  \n       DacƒÉ s[i] ‚â† s[n - i + 1] atunci  \n           f ‚Üê 0  \n       SfDacƒÉ  \n       i ‚Üê i + 1  \n   SfC√¢tTimp   \n    returneazƒÉ f  \nSfSubalgoritm  \nPreciza»õi care dintre urmƒÉtoarele afirma»õii sunt adevƒÉrate:  \n \nA. Subalgoritmul returneazƒÉ 1 dacƒÉ s are un numƒÉr par de caractere.  \nB. Subalgoritmul returneazƒÉ 1 dacƒÉ s are un numƒÉr impar de caractere.  \nC. Subalgoritmul returneazƒÉ 1 dacƒÉ s este un palindrom.  \nD. Subalgoritmul returneazƒÉ 1 dacƒÉ s con»õine doar caractere distincte.  \n \n11.  Care dintre urmƒÉtoarele expresii au valoarea adevƒÉrat  dacƒÉ »ôi numai dacƒÉ x este numƒÉr impar »ôi \nnegativ?  NotƒÉm cu | x| valoarea absolutƒÉ a lui x (modulul lui x). \n \nA. (|x| MOD 2 = 1) »òI (x < 0) \nB. NU ((|x| MOD 2 = 0) »òI (x ‚â• 0)) \nC. NU ((|x| MOD 2 = 0) SAU (x ‚â• 0)) \nD. (|x| MOD 2 ‚â† 0) SAU (x < 0) \n \n12.  Subalgoritmul ceFace(n)  are ca parametru de intrare un numƒÉr natural n (0 ‚â§ n ‚â§ 10000).   \n \nSubalgoritm ceFace(n):  \n    s ‚Üê 0  \n    C√¢tTimp n > 0 executƒÉ  \n       c ‚Üê n MOD 10 \n       DacƒÉ c MOD 2 ‚â† 0 atunci  \n           s ‚Üê s + c  \n       SfDacƒÉ  \n       n ‚Üê n DIV 10 \n    SfC√¢tTimp  \n    returneazƒÉ  s \nSfSubalgoritm  \n \nCe va returna apelul  ceFace(1234) ? \n \nA. 4                    B. 10                    C. 60                    D. 0 \n \n \n13. ConsiderƒÉm un »ôir de caractere »ôi o func»õie f care prime»ôte ca parametru un caracter »ôi returneazƒÉ 1 \ndacƒÉ acel caracter este cifrƒÉ »ôi 0 altfel. Care dintre urmƒÉtoarele abordƒÉri determinƒÉ dacƒÉ »ôirul de caractere \neste format numai din cifre?  \n \nA. VerificƒÉm dacƒÉ func»õia f, aplicatƒÉ pe fiecare caracter al »ôi rului de caractere, returneazƒÉ \n√Æntotdeauna 1.  \nB. VerificƒÉm dacƒÉ suma  valorilor returnate de f, aplicatƒÉ pe fiecare caracter al »ôirului de caractere, \neste egalƒÉ cu lungimea »ôirului de caractere.  \nC. VerificƒÉm dacƒÉ func»õia f, aplicatƒÉ pe fiecare caracter al »ôirului  de caractere, returneazƒÉ cel pu»õin \no datƒÉ 1.  \nD. AplicƒÉm func»õia f pe caractere alese aleatoriu din »ôir p√¢nƒÉ c√¢nd sunt returnate un numƒÉr de \nvalori egale cu 1 egal cu lungimea »ôirului.  \n 5 \n 14.   Care dintre algoritmii urmƒÉtori pot fi implementa»õi √Æn a»ôa fel √Ænc√¢t sƒÉ aibƒÉ complexitate de timp \nliniarƒÉ (O( n))? \n \nA. Algoritmul de cƒÉutare secven»õialƒÉ a unui element √Æntr -un vector  de n numere  \nB. Algoritmul de sortare prin inser»õie a unui tablou unidimensional  de n numere  \nC. Algoritmul  de cƒÉutare al numƒÉrului maxim √Æntr-un vector nesortat  de n numere  \nD. Algoritmul de determinare a sumei elementelor de pe diagonala principalƒÉ a unei matric e \npƒÉtratice cu n linii »ôi n coloane.  \n \n15.  Se considerƒÉ subalgoritmul f(a, b) , unde a »ôi b sunt numere naturale (1 ‚â§ a, b ‚â§ 10000).   \n \nSubalgoritm f(a, b):  \n    m ‚Üê a  \n    C√¢tTimp b MOD m > 0 executƒÉ  \n        m ‚Üê m + 1  \n    SfC√¢tTimp \n    returneazƒÉ m \nSfSubalgoritm  \n \nPentru care dintre urmƒÉtoarele apeluri corpul buclei C√¢tTimp se va executa cel mult o datƒÉ?  \n \nA. f(10, 11)           B. f(10, 10)           C. f(10, 9)           D. f(10, 15)  \n \n \n16.   Se considerƒÉ subalgoritmul  f(a, b) , unde a »ôi b sunt numere naturale (1 ‚â§ a, b ‚â§ 10000).   \n \nSubalgoritm f(a, b):  \n    c ‚Üê 0  \n    d ‚Üê 0  \n    p ‚Üê 1  \n    C√¢tTimp a + b + c > 0 executƒÉ  \n        c ‚Üê a MOD 10 + b MOD 10 + c  \n        d ‚Üê d + (c MOD 10) * p  \n        p ‚Üê p * 10  \n        a ‚Üê a DIV 10 \n        b ‚Üê b DIV 10 \n        c ‚Üê c DIV 10   \n    SfC√¢tTimp \n    returneazƒÉ d \nSfSubalgoritm  \n \nCe va returna apelul f(493, 1836) ? \n \nA. 2329                    B. 2229                    C. 2430                    D. 3292  \n \n \n17. Se considerƒÉ subalgoritmul  afisare(M , n) care prime»ôte ca »ôi parametru un »ôir M cu n (n ‚â§ 10) \nnumere √Æntregi   (M[1], M[2], ‚Ä¶, M[n]) reprezent√¢nd o mul»õime.    \n \nSubalgoritm  afisare(M, n):  \n    nr ‚Üê 2n \n    k ‚Üê 0  \n    C√¢tTimp k < nr executƒÉ  \n       curent ‚Üê k  \n       Scrie '{' \n       Pentru j = 1, n executƒÉ  \n           r ‚Üê curent MOD 2 \n           curent ‚Üê curent DIV 2 \n           DacƒÉ r = 1 atunci  \n              Scrie M[j] \n           SfDacƒÉ  \n       SfPentru   \n       Scrie '}' \n       Scrie linie nouƒÉ  \n       k ‚Üê k + 1  \n    SfC√¢tTimp \nSfSubalgoritm  6 \n  \nPreciza»õi care dintre urmƒÉtoarele afirma»õii sunt adevƒÉrate:  \n \nA. Subalgoritmul afi»ôeazƒÉ toate permutƒÉrile mul»õimii M. \nB. Subalgoritmul afi»ôeazƒÉ toate combinƒÉrile elementelor mul»õimii M luate c√¢te i, i = 0, 1, ..., n (nu \nneapƒÉrat √Æn aceastƒÉ ordine).  \nC. Subalgoritmul afi»ôeazƒÉ toate aranjamentele elementelor mul»õimii M luate c√¢te i, i = 0, 1, ..., n \n(nu neapƒÉrat √Æn aceastƒÉ ordine).  \nD. Subalgoritmul afi»ôeazƒÉ toate submul»õimile mul»õimii M. \n \n18. Se dƒÉ subalgoritmul s(a, b, c), unde a, b, c sunt numere naturale pozitive (1 ‚â§ a, b, c ‚â§ 10000).   \n \nSubalgoritm s(a, b, c):  \n    DacƒÉ (a = 1) SAU (b = 1) SAU (c = 1) atunci  \n        returneazƒÉ 1 \n    altfel  \n        DacƒÉ a > b atunci  \n            returneazƒÉ a * s(a - 1, b, c)  \n        altfel  \n            DacƒÉ a < b atunci  \n                returneazƒÉ  b * s(a, b - 1, c)  \n            altfel  \n                returneazƒÉ  c * s(a - 1, b - 1, c - 1) \n            SfDacƒÉ  \n        SfDacƒÉ  \n    SfDacƒÉ  \nSfSubalgoritm  \n \nPreciza»õi care dintre urmƒÉtoarele afirma»õii sunt adevƒÉrate √Æn cazul √Æn care a = b »ôi a < c: \n \nA. Subalgoritmul calculeazƒÉ »ôi returneazƒÉ c! \nB. Subalgoritmul calculeazƒÉ »ôi returneazƒÉ c! / (c ‚Äì a + 1)!  \nC. Subalgoritmul calculeazƒÉ »ôi returneazƒÉ c! / (c ‚Äì a - 1)! \nD. Subalgoritmul calculeazƒÉ »ôi returneazƒÉ aranjamente de c luate c√¢te ( a - 1) \n \n \n19. Subalgoritmul de mai jos are ca parametri de intrare un »ôir A cu n numere naturale ( A[1], A[2], ‚Ä¶, \nA[n]) »ôi numƒÉrul natural n (1 ‚â§ n ‚â§ 10000). Pentru numerele naturale x »ôi y, x^y semnificƒÉ x la puterea \ny (xy). \nSubalgoritm  h(A, n):  \n    DacƒÉ n = 0 atunci  \n        returneazƒÉ  0 \n    altfel  \n        returneazƒÉ  A[n] * ( -1)^(1 - A[n] MOD 2) + h(A, n - 1) \n   SfDacƒÉ  \nSfSubalgoritm  \n \nPreciza»õi care dintre urmƒÉtoarele afirma»õii sunt adevƒÉrate:  \n \nA. Subalgoritmul returneazƒÉ diferen»õa dintre suma elementelor de pe pozi»õii pare »ôi suma \nelementelor de pe pozi»õiile impare din »ôirul A \nB. Subalgoritmul returneazƒÉ diferen»õa dintre suma elementelor pare »ôi suma elementelor impare \ndin »ôirul A \nC. Subalgoritmul returneazƒÉ diferen»õa dintre suma elementelor impare »ôi suma elementelor pare \ndin »ôirul A \nD. Niciunul din celelalte r«éspunsuri nu este corect  \n \n20. Un fi»ôier Excel con»õine n √ÆnregistrƒÉri cu numƒÉr de ordine de la 1 la n. Aceste √ÆnregistrƒÉri trebuie  \ncopiate √Æntr -un fi»ôier Word √Æn care √ÆnregistrƒÉrile se vor aranja √Æn maxim r r√¢nduri »ôi exact c coloane pe \nfiecare paginƒÉ.  Se garanteazƒÉ cƒÉ valoarea lui n √Æntotdeauna permite aranjarea pe exact c coloane.  \n \nSƒÉ notƒÉm cu x1, ..., xc numƒÉrul de √ÆnregistrƒÉri, care sunt copiate pe fiecare coloanƒÉ pe o anumitƒÉ paginƒÉ.  7 \n  \nPe prima paginƒÉ a documentului Word, datoritƒÉ prezen»õei unui antet, numƒÉrul de r√¢nduri este r1, r1 < r \n(numƒÉrul de r√¢nduri prezent pe prima pagina este mai mic), adicƒÉ xp = r1, ‚àÄ 1 ‚â§ p ‚â§ c. \n \n√énregistrƒÉrile vor fi aranjate √Æn fi»ôierul Word pe fiecare paginƒÉ de sus √Æn jos pe fiecare coloanƒÉ, coloanele \nfiind completate de la st√¢nga la dreapta: dacƒÉ prima √Ænregistrare de pe o paginƒÉ are numƒÉrul de ordine i, \n√Ænregistrarea cu num ƒÉrul de ordine ( i + 1) va fi prezentƒÉ sub ea, iar √Ænregistrarea cu numƒÉrul de ordine \n(i + x1) va fi prima √Ænregistrare de pe coloana 2 de pe pagina respectivƒÉ »ô.a.m.d.  \n \nPe ultima paginƒÉ a documentului Word se dore»ôte ca pe toate coloanele numƒÉrul √ÆnregistrƒÉrilor sƒÉ fie \nechilibrat, adicƒÉ diferen»õa dintre numƒÉrul √ÆnregistrƒÉrilor de pe oricare douƒÉ coloane sƒÉ fie cel mult 1 (| xj \n- xk| ‚â§ 1, ‚àÄ 1 ‚â§ j, k ‚â§ c, j ‚â† k). \n \n√én cazul celorlalte pagini (√Æn afarƒÉ de prima »ôi ultima) xp = r, ‚àÄ 1 ‚â§ p ‚â§ c.  \n \nPentru n = 5883, r = 46, r1 = 12 »ôi c = 2 pe ce r√¢nd al paginii se poate regƒÉsi ultima √Ænregistrare din \ndocument (cea cu numƒÉr de ordine  i = 5883)?  \n \nA. 29                    B. 30                    C. 31                    D. 32  \n \n \n21.  Se considerƒÉ subalgoritmul  prelucreazƒÉ(a, b, c, d, e) , care prime»ôte ca parametr i cinci numere \n√Æntregi  a, b, c, d »ôi e (1 ‚â§ a, b ‚â§ 10000, 2 ‚â§ c ‚â§ 16, 1 ‚â§ d < c). \n \nSubalgoritm  prelucreazƒÉ(a, b, c, d, e):  \n    DacƒÉ a = 0 »òI b = 0 atunci  \n        DacƒÉ e = 0 atunci  \n            returneazƒÉ  1 \n        altfel  \n            returneazƒÉ  0 \n        SfDacƒÉ  \n    SfDacƒÉ  \n    DacƒÉ (a MOD c = d) »òI (b MOD c = d) atunci  \n        returneazƒÉ  prelucreazƒÉ(a DIV c, b DIV c, c, d, e)  \n    SfDacƒÉ  \n    DacƒÉ a MOD c = d atunci  \n        returneazƒÉ  prelucreazƒÉ(a DIV c, b DIV c, c, d, e + 1)  \n    SfDacƒÉ  \n    DacƒÉ b MOD c = d atunci  \n        returneazƒÉ  prelucreazƒÉ(a DIV c, b DIV c, c, d, e - 1) \n    altfel  \n        returneazƒÉ  prelucreazƒÉ(a DIV c, b DIV c, c, d, e)  \n    SfDacƒÉ  \nSfSubalgoritm  \n \nPreciza»õi care dintre urmƒÉtoarele afirma»õii sunt adevƒÉrate pentru apelul prelucreazƒÉ(a, b, c, d, 0)  : \n \nA. ReturneazƒÉ 1 dacƒÉ reprezentƒÉrile √Æn baza c a numerelor a »ôi b con»õin cifra d de numƒÉr egal de \nori, 0 √Æn caz contrar  \nB. ReturneazƒÉ 1 dacƒÉ cifra d apare √Æn reprezentarea √Æn baza c a numƒÉrului a »ôi √Æn reprezentarea √Æn \nbaza c a numƒÉrului b, 0 √Æn caz contrar  \nC. Retur neazƒÉ 1 dacƒÉ cifra d apare √Æn reprezentarea √Æn baza c a numƒÉrului a sau √Æn reprezentarea \n√Æn baza c a numƒÉrului b, 0 √Æn caz contrar  \nD. ReturneazƒÉ 1 dacƒÉ  cifra d nu apare deloc √Æn reprezentƒÉrile √Æn baza c a numerelor a »ôi b, 0 √Æn caz \ncontrar  \n \n22.  Se considerƒÉ subalgoritmii  val(p, s, i, n, x) »ôi val_exp(p, n, x) a cƒÉror parametri au urmƒÉtoarea \nspecifica»õie: un »ôir p cu n numere √Æntregi   (p[1], p[2], ‚Ä¶, p[n]), numerele naturale s, i »ôi n (n ‚â§ 1000, n \n= 2k, k < 10), »ôi numƒÉrul real x. Valorile »ôirului p reprezintƒÉ coeficien»õii expresiei  √Æn ordine crescƒÉtoare \na exponen»õilor, exponentul maxim fiind egal cu n - 1, √Æntr -o expresie de forma p[1] + p[2] ¬∑ x + p[3] ¬∑ \nx2 + ... + p[n] ¬∑ xn-1 \n \nExemplu:  p = [1, 2, 3, 4] corespunde expresiei  E(x)=1 + 2x + 3x2 + 4x3.  8 \n  \nSubalgoritm  val(p, s, i, n, x):  \n    DacƒÉ s + i ‚â§ n atunci      \n        ________________________  \n    altfel  \n           returneazƒÉ  p[s] \n    SfDacƒÉ \nSfSubalgoritm  \n \nSubalgoritm  val_exp (p, n, x):  \n    returneazƒÉ  val(p, 1, 1, n, x)  \nSfSubalgoritm  \n \nCare dintre urmƒÉtoarele variante completeazƒÉ corect spa»õiul subliniat astfel √Ænc√¢t subalgoritmul \nval_exp(p, n, x)  sƒÉ returneze valoarea expresiei E(x)? \n \nA. returneazƒÉ  p[s] + x * val(p, s + i, i * 2, n , x * x)  \nB. returneazƒÉ  val(p, s, i * 2, n - i, x * x) + x * val(p, s + i, i * 2, n, x * x)  \nC. returneazƒÉ  val(p, s + i, i * 2, n, x * x) + x * val(p, s, i * 2, n - i, x * x)  \nD. returneazƒÉ  p[s] + x * val(p, s + i, i, n, x)  \n \n \n23.  Se considerƒÉ subalgoritmul  f(a), care prime»ôte ca »ôi parametru un numƒÉr natural a  (2 ‚â§ a < \n1000000)  »ôi returneazƒÉ adevƒÉrat  dacƒÉ existƒÉ un numƒÉr natural d, 1 < d < a cu proprietatea cƒÉ d divide \na, »ôi fals  √Æn caz contrar.  Nota»õia [x] reprezintƒÉ partea √ÆntreagƒÉ a numƒÉrului x. \nCare dintre variantele urmƒÉtoare ale subalgoritmului f(a) sunt corecte?   \n \nA.  \nSubalgoritm f(a):  \n    DacƒÉ a = 2 atunci  \n        returneazƒÉ  fals \n    SfDacƒÉ  \n    DacƒÉ a MOD 2 = 0 atunci  \n        returneazƒÉ  adevƒÉrat  \n    SfDacƒÉ     \n    Pentru d ‚Üê 3, [ ‚àöùëé] - 1, 2 executƒÉ  \n        DacƒÉ a MOD d = 0 atunci  \n            returneazƒÉ  adevƒÉrat  \n        SfDacƒÉ  \n    SfPentru  \n    returneazƒÉ  fals \nSfSubalgoritm  \n  \nB.  \nSubalgoritm  f(a):  \n    Pentru d ‚Üê 2,[ ‚àöùëé] executƒÉ  \n        DacƒÉ a MOD d = 0 atunci  \n            returneazƒÉ  adevƒÉrat  \n        SfDacƒÉ  \n    SfPentru  \n    returneazƒÉ  fals \nSfSubalgoritm  \n C.  \nSubalgoritm  f(a):  \n    DacƒÉ a ‚â§ 2 atunci  \n        returneazƒÉ  fals \n    SfDacƒÉ  \n    DacƒÉ a MOD 2 = 0 atunci  \n        returneazƒÉ  adevƒÉrat  \n    SfDacƒÉ     \n    Pentru d ‚Üê 3, [ ‚àöùëé], 2 executƒÉ  \n        DacƒÉ a MOD d = 0 atunci  \n            returneazƒÉ  adevƒÉrat  \n        SfDacƒÉ  \n    SfPentru  \n    returneazƒÉ  fals \nSfSubalgoritm  \n \nD.  \nSubalgoritm f(a): \n     d ‚Üê a - 1 \n     C√¢tTimp adevƒÉrat  executƒÉ  \n         DacƒÉ a MOD d = 0 atunci  \n             returneazƒÉ adevƒÉrat  \n         SfDacƒÉ  \n         d ‚Üê d - 1 \n     SfC√¢tTimp  \n     returneazƒÉ fals \nSfSubalgoritm  \n \n \n24.  Fie expresia de mai jos, unde 1 < A < 2021 »ôi 1 < n < 10202110.  \n \nE(A, n) = (A + A2 + A3 + ... + An) MOD  2021  \n \nCare dintre urmƒÉtorii subalgoritmi calculeazƒÉ corect valoarea E(A, n) »ôi are complexitatea timp \nspecificatƒÉ?  \n 9 \n Presupune»õi cƒÉ toate calculele se realizeazƒÉ pe tipuri de date pe 32 de bi»õi. Presupune»õi cƒÉ xk se calculeazƒÉ \n√Æn O(log k). \n \nA.  \nSubalgoritm  E(A, n):  \n    returneazƒÉ  (A * (An - 1) DIV (A - 1)) MOD 2021 \nSfSubalgoritm  \n \nComplexitatea timp: O(log n) \n \nB.  \nSubalgoritm  E(A, n):  \n    returneazƒÉ  ((A * (An - 1)) MOD 2021) DIV ((A - 1) MOD 2021)  \nSfSubalgoritm  \n \nComplexitatea timp: O(log n) \n \nC.  \nSubalgoritm  E1(A, n):  \n    DacƒÉ n = 1 atunci  \n        returneazƒÉ  (A, A) //returneazƒÉ o pereche de valori  \n    SfDacƒÉ  \n    DacƒÉ n MOD 2 = 1 atunci  \n        (t1, t2) ‚Üê E1(A, n - 1) \n        p ‚Üê (t1 * A) MOD 2021 \n        returneazƒÉ  (p, (p + t2) MOD 2021)  \n    altfel  \n        (t1, t2) ‚Üê E1(A, n DIV 2) \n        p ‚Üê (t1 * t1) MOD 2021 \n        returneazƒÉ  (p, ((1 + t1) * t2) MOD 2021)  \n        SfDacƒÉ  \nSfSubalgoritm  \n \nSubalgoritm  E(A, n):  \n    (aux1, aux2) ‚Üê E1(A, n)  \n    returneazƒÉ  aux2 \nSfSubalgoritm  \n \nComplexitatea timp: O(log n) \n \nD.  \nSubalgoritm E(A, n):  \n    raspuns ‚Üê A  \n    Pentru i = 2, n executƒÉ  \n        raspuns ‚Üê raspuns + Ai \n    SfPentru  \n \n    returneazƒÉ  raspuns MOD 2021 \nSfSubalgoritm  \n \nComplexitatea: O( n ¬∑ log n) \n \n \n25.  Pe un cerc se scriu, √Æn ordine crescƒÉtoare, toate numerele de la 1 la 1000, √Æn sensul acelor de \nceasornic. √éncep√¢nd de la 1, colorƒÉm, √Æn sensul acelor de ceasornic, fiecare al k-lea numƒÉr ( 1, k + 1, 2 ¬∑ \nk + 1, ...). Procedeul se continuƒÉ p√¢nƒÉ c√¢nd ajunge la un numƒÉr deja colorat, fiind colorate la final x \nnumere. Care dintre urmƒÉtoarele afirma»õii sunt adevƒÉrate?  \n \nA. DacƒÉ k = 15 atunci x = 300  \nB. DacƒÉ k = 45 atunci x = 200     \nC. DacƒÉ k = 25 atunci x = 40         \nD. DacƒÉ k = 30 atunci x = 150  10 \n  \n26. Se considerƒÉ subalgoritmul  ceFace(n, k)  unde n »ôi k sunt numere naturale (1 ‚â§ n, k ‚â§ 1000000).  \n \nSubalgoritm  ceFace(n,  k): \n    nr ‚Üê 0  \n    p ‚Üê 1  \n    C√¢tTimp (n ‚â† 0) »òI (k ‚â† 0) executƒÉ  \n        DacƒÉ n MOD 2 ‚â† 0 atunci  \n            nr ‚Üê  nr + ((n DIV 10) MOD 10) * p  \n            p ‚Üê p * 10  \n        altfel  \n            k ‚Üê k - 1 \n       SfDacƒÉ  \n       n ‚Üê n DIV 10 \n    SfC√¢tTimp  \n    returneazƒÉ  nr \nSfSubalgoritm  \n \nCare dintre urmƒÉtoarele perechi de apeluri returneazƒÉ valori identice?  \n \nA. ceFace(32345, 3) »ôi ceFace(321458, 7)  \nB. ceFace(321458, 4) »ôi ceFace(2314587, 4)  \nC. ceFace(2314,  3) »ôi ceFace(23145, 4)  \nD. ceFace(23145, 3) »ôi ceFace(231458, 4)  \n \n \n27.  Se considerƒÉ subalgoritmii:  \n‚Ä¢ putere(b, p)  ‚Äì determinƒÉ bp (b la puterea p), b, p - numere naturale (1 ‚â§ b ‚â§ 20, 1 ‚â§ p ‚â§ 20);  \n‚Ä¢ nrCifre(nr)  ‚Äì returneazƒÉ numƒÉrul cifrelor unui numƒÉr natural nenul nr (0 < nr ‚â§ 1000000), sau \nvaloarea 0 atunci c√¢nd nr = 0; \n‚Ä¢ produs(st, dr ) ‚Äì subalgoritmul de mai jos, unde st, dr ‚Äì numere naturale  (100 < st < 1000000, \n0 ‚â§ dr < 1000000, st ‚Äì numƒÉr care, reprezentat √Æn baza 10, are cel pu»õin douƒÉ cifre nenule).  \n \nSubalgoritm produs(st, dr) : \n    DacƒÉ st > 0 atunci  \n        drCrt ‚Üê _____________________________  \n        stCrt ‚Üê st DIV 10 \n        DacƒÉ st * dr < stCrt * drCrt atunci  \n            returneazƒÉ  produs(stCrt, drCrt)  \n        altfel  \n            returneazƒÉ  st * dr  \n        SfDacƒÉ  \n    altfel  \n        returneazƒÉ  st * dr  \n    SfDacƒÉ  \nSfSubalgoritm  \n \nCare dintre urmƒÉtoarele variante completeazƒÉ corect spa»õiul subliniat astfel √Ænc√¢t subalgoritmul \nprodus(st, dr) prin executarea secven»õei de instruc»õiuni  \n \nscrie produs(1092, 0)  \nscrie produs(75981, 0)  \n \nsƒÉ se afi»ôeze 920 »ôi 73575?  \n \nA. (st MOD 10) * putere(10, nrCifre(dr)) + dr  \nB. (st MOD 10) * putere(10, dr) + dr  \nC. (st MOD 10) * putere(10, nrCifre(dr))  \nD. (st MOD 10) * nrCifre(dr)  11 \n  \n28.  Se considerƒÉ subalgoritmul ceFace(a, n, i, f ), care prime»ôte ca parametru un »ôir a cu n numere \n√Æntregi ( a[1], a[2], ‚Ä¶, a[n]) »ôi numerele √Æntregi i, f »ôi n (2 ‚â§ n ‚â§ 10000).   \n \nSubalgoritm  ceFace(a, n, i, f):  \n    DacƒÉ (i = n) »òI (f = 2) atunci  \n        returneazƒÉ  ADEVƒÇRAT  \n    altfel  \n        DacƒÉ (i = n) atunci  \n            returneazƒÉ  FALS \n        altfel  \n            DacƒÉ (f ‚â§ 1) »òI (a[i] < a[i  + 1])  atunci  \n                returneazƒÉ ceFace(a, n, i + 1, 1)  \n            SfDacƒÉ  \nDacƒÉ (1 ‚â§ f) »òI (a[i] > a[i  + 1])  atunci  \n    returneazƒÉ  ceFace(a, n, i + 1, 2)  \n            SfDacƒÉ  \nreturneazƒÉ  FALS \n        SfDacƒÉ  \n   SfDacƒÉ  \nSfSubalgoritm    \n \nPreciza»õi care dintre urmƒÉtoarele afirma»õii sunt adevƒÉrate, consider√¢nd apelul ini»õial ceFace(a,n,1,0) . \n \nA. Subalgoritmul returneazƒÉ adevƒÉrat  dacƒÉ »ôi numai dacƒÉ maximul »ôirului a se aflƒÉ pe o pozi»õie i, \n1 < i < n.  \nB. Subalgoritmul returneazƒÉ adevƒÉrat  dacƒÉ »ôi numai dacƒÉ ‚àÉ k , (1 < k < n), astfel √Ænc√¢t a[1] < a[2] \n< ‚Ä¶ < a[k] > a[k + 1] > ‚Ä¶ > a[n].  \nC. Subalgoritmul returneazƒÉ fals dacƒÉ »ôirul a este strict crescƒÉtor.  \nD. Subalgoritmul returneazƒÉ adevƒÉrat  dacƒÉ »ôi numai dacƒÉ ‚àÉ k , (1 < k < n), astfel √Ænc√¢t a[ k] > a[ k \n+ 1] > ‚Ä¶ > a[n]. \n \n29.  Fie urmƒÉtorul subalgoritm, av√¢nd ca parametru numƒÉrul natural nenul n »ôi care returneazƒÉ un numƒÉr \nnatural .  \nSubalgoritm f(n):  \n    j ‚Üê n  \n    C√¢tTimp j > 1 executƒÉ  \n       i ‚Üê 1  \n       C√¢tTimp i ‚â§ n4 executƒÉ  \n           i ‚Üê 4 * i \n       SfC√¢tTimp  \n       j ‚Üê j DIV 2 \n    SfC√¢tTimp  \n    returneazƒÉ j \nSfSubalgoritm  \n \n√én care dintre urmƒÉtoarele clase de complexitate se √ÆncadreazƒÉ complexitatea timp a algoritmului ? \n \nA. O(log 2 ùíèùüê) \nB. O(log 22 ùíèùüê) \nC. O(log 42 ùíè) \nD. O(log 2 log 4 n) \n \n30.  Se dƒÉ un »ôir s de n caractere din alfabetul englez, ( s[1], s[2], ‚Ä¶, s[n]). Dorim sƒÉ aflƒÉm cel mai lung \nsufix al sƒÉu care este palindrom. Un sufix al unui »ôir de caractere este o subsecven»õƒÉ a »ôirului care \ncon»õine ultimul caracter. De exemplu, pentru »ôirul abab , cel mai lung sufix palindrom al sƒÉu este bab. \n \nPresupunem cƒÉ avem definit urmƒÉtorul subalgoritm : \n‚Ä¢ ascii(c ) - returneazƒÉ codul ASCII   al caracterului c. \nPresupunem cƒÉ opera»õiile a ritmetice nu produc depƒÉ»ôire pe mul»õimea numerelor √Æntregi . \nCare dintre urmƒÉtoarele implementƒÉri returneazƒÉ lungimea acestui s ufix la apelul sufix(s, n) ? 12 \n  \nA.  \nSubalgoritm  sufix(s, n):  \n    hf ‚Üê 0 \n    hb ‚Üê 0 \n    raspuns ‚Üê 1  \n    Pentru i ‚Üê n, 1, -1 executƒÉ \n        hf ‚Üê ascii(s[i]) + 2021 * hf  \n        hb ‚Üê hb + ascii(s[i]) * 2021n - i \n \n        DacƒÉ hf = hb atunci \n            raspuns ‚Üê n ‚Äì i + 1 \n        SfDacƒÉ \n    SfPentru  \n    returneazƒÉ  raspuns \nSfSubalgoritm  \n \nB.  \nSubalgoritm  sufix(s, n):  \n    hf ‚Üê 0 \n    hb ‚Üê 0 \n    raspuns ‚Üê 1  \n    Pentru i ‚Üê n, 1, -1 executƒÉ \n        hf ‚Üê ascii(s[i]) + 3 * hf  \n        hb ‚Üê hb + ascii(s[i]) * 3n - i  \n \n        DacƒÉ hf = hb atunci \n            raspuns ‚Üê n ‚Äì i + 1 \n        SfDacƒÉ \n    SfPentru  \n    returneazƒÉ  raspuns \nSfSubalgoritm  C.  \nSubalgoritm  sufix(s, n):  \n    hf ‚Üê 0 \n    hb ‚Üê 0 \n    raspuns ‚Üê 1  \n    Pentru i ‚Üê n, 1, -1 executƒÉ \n        hf ‚Üê ascii(s[i]) + 2021 * hb  \n        hb ‚Üê hf + ascii(s[i]) * 2021n - i  \n \n        DacƒÉ hf = hb atunci \n            raspuns ‚Üê n ‚Äì i + 1 \n        SfDacƒÉ \n    SfPentru  \n    returneazƒÉ  raspuns \nSfSubalgoritm  \n \nD.  Niciuna dintre celelalte variante nu este \ncorectƒÉ.  \n \n UNIVERSITATEA BABE»ò -BOLYAI CLUJ -NAPOCA  \nFACULTATEA DE MATEMATICƒÇ »òI INFORMATICƒÇ  \n \nConcurs de Admitere 9 septembrie  2021  \nProba scrisƒÉ la INFORMATICƒÇ  \nBAREM  »òI REZOLVARE  \n \nOFICIU : 10 puncte  \n1 C 3 puncte  \n2 B 3 puncte  \n3 A 3 puncte  \n4 B, D 3 puncte  \n5 B 3 puncte  \n6 D 3 puncte  \n7 A, B, C  3 puncte  \n8 B 3 puncte  \n9 D 3 puncte  \n10 C 3 puncte  \n11 A, C 3 puncte  \n12 A 3 puncte  \n13 A, B 3 puncte  \n14 A, C, D  3 puncte  \n15 A, B 3 puncte  \n16 A 3 puncte  \n17 B, D 3 puncte  \n18 B, D 3 puncte  \n19 C 3 puncte  \n20 C, D 3 puncte  \n21 A 3 puncte  \n22 B, D 3 puncte  \n23 B, C 3 puncte  \n24 C 3 puncte  \n25 B, C 3 puncte  \n26 A, D 3 puncte  \n27 A 3 puncte  \n28 B, C 3 puncte  \n29 B, C 3 puncte  \n30 A 3 puncte  \n ",
    "1 \n UNIVERSITATEA BABE≈û -BOLYAI  \nFACULTATEA DE MATEMATICƒÇ ≈ûI INFORMATICƒÇ  \nConcurs de admitere ‚Äì 19 iulie 20 21 \nProba scrisƒÉ la InformaticƒÉ  \n \n1. Fie urmƒÉtorul subalgoritm, av √¢nd ca parametru  de intrare numƒÉrul natural n »ôi care returneazƒÉ  un \nnumƒÉr natural.   \n \nSubalgoritm calcul(n) : \n    E ‚Üê 1  \n    P ‚Üê 1  \n    i ‚Üê 2  \n    C√¢tTimp i ‚â§ n executƒÉ  \n        P ‚Üê (-1) * P * i  \n        E ‚Üê E + P  \n        i ‚Üê i + 1  \n    SfC√¢tTimp  \n    returneazƒÉ E \nSfSubalgoritm  \n \nCare este valoarea returnatƒÉ de subalgoritm, √Æn condi »õiile √Æn care n ‚â• 1? \n \nA. 1! ‚Äì 2! + 3! ‚Äì 4! + ... + ( -1)n + 1 ¬∑ n! \nB. 1 ‚Äì 1! + 2! ‚Äì 3! + ... + ( -1)n ¬∑ n! \nC. 1 ‚Äì 1 ¬∑ 2 + 1 ¬∑ 2 ¬∑ 3 ‚Äì 1 ¬∑ 2 ¬∑ 3 ¬∑ 4 + ... +  ( -1)n + 1 ¬∑ 1 ¬∑ 2 ¬∑ ... ¬∑ n \nD. 1 + 1 ¬∑ 2 ‚Äì 1 ¬∑ 2 ¬∑ 3 + 1 ¬∑ 2 ¬∑ 3 ¬∑ 4 + ... + ( -1)n¬∑ 1¬∑ 2 ¬∑ ... ¬∑ n \n \n \n2. Un fi »ôier Excel con »õine n √ÆnregistrƒÉri numerotate  de la 1 la n. Aceste √ÆnregistrƒÉri trebuie copiate √Æntr -\nun fi »ôier Word √Æn care √ÆnregistrƒÉrile se vor aranja √Æn c√¢te r r√¢nduri »ôi c coloane pe fiecare paginƒÉ  (cu \nexcep»õia primei »ôi ultimei pagini) .  Pe prima paginƒÉ a documentului Word, datoritƒÉ prezen »õei unui antet, \nnumƒÉrul de r√¢nduri este r1, r1 < r (numƒÉrul de r√¢nduri prezent pe prima pagina este mai mic).   \n \n√énregistrƒÉrile vor fi aranjate √Æn fi »ôierul Word pe fiecare paginƒÉ de sus √Æn jos pe fiecare coloanƒÉ, coloanele \nfiind completate de la st√¢nga la dr eapta: dacƒÉ prima √Ænregistrare de pe o paginƒÉ are numƒÉrul de ordine i, \n√Ænregistrarea cu numƒÉrul de ordine (i + 1) va fi prezentƒÉ sub ea, iar √Ænregistrarea cu numƒÉrul de ordine \n(i + r) va fi prima √Ænregistrare de pe coloana 2 de pe pagina respectivƒÉ »ô.a.m.d.  \n \nPentru n = 5000, r = 46, r1 = 12 »ôi c = 2 pe ce paginƒÉ a documentului Word »ôi pe ce coloanƒÉ se va regƒÉsi \n√Ænregistrarea cu numƒÉr de ordine i = 3245?  \nA. Pagina 36, ultima coloanƒÉ  \nB. Pagina 37, prima coloanƒÉ  \nC. Pagina 37, ultima coloanƒÉ  \nD. Pagina 38, prima coloanƒÉ  \n \n3. Se considerƒÉ subalgoritmul ceFace(m) ,  unde  m este un numƒÉr  natural (10  ‚â§ m ‚â§ 10000).  \n  \nSubalgoritm ceFace(m) : \n    DacƒÉ m = 0 atunci  \n        returneazƒÉ 0 \n    SfDacƒÉ     \n    DacƒÉ m MOD 9 = 0 atunci  \n        returneazƒÉ  9 \n    SfDacƒÉ  \n    returneazƒÉ  m MOD 9 \nSfSubalgoritm  2 \n Preciza »õi care dintre urmƒÉtoarele afirma »õii sunt adevƒÉrate:  \n \nA. Subalgoritmul returneazƒÉ restul √ÆmpƒÉr »õirii numƒÉrului m la 9.  \nB. Subalgoritmul returneazƒÉ numƒÉrul divizorilor care sunt divizibili cu 9 ai numƒÉrului m. \nC. Subalgoritmul returneazƒÉ cifra de control a numƒÉrului m (suma cifrel or sale, apoi suma cifrelor \nacestei sume, p√¢nƒÉ c√¢nd suma ob »õinutƒÉ este un numƒÉr format dintr -o singurƒÉ cifrƒÉ).  \nD. Subalgoritmul returneazƒÉ cifra de control a numƒÉrului m (suma cifrelor sale, apoi suma cifrelor \nacestei sume, p√¢nƒÉ c√¢nd suma ob »õinutƒÉ este un num ƒÉr format dintr -o singurƒÉ cifrƒÉ) dacƒÉ »ôi numai \ndacƒÉ numƒÉrul m este divizibil cu 9.  \n \n \n4. Pentru a genera numerele cu n cifre formate doar din cifrele 0, 2, 9,  se utilizeazƒÉ un algoritm care, \npentru n = 2, genereazƒÉ √Æn ordine crescƒÉtoare numerele 20, 22, 29, 90, 92, 99.  \nDacƒÉ n = 4 »ôi se utilizeazƒÉ acela»ôi  algoritm, care este numƒÉrul generat imediat dupƒÉ numƒÉrul 2009 ? \nA. 2022  \nB. 2090  \nC. 2010  \nD. Niciuna dintre celelalte variante  \n \n \n5. Se considerƒÉ subalgoritmul cauta(n) , unde n este un numƒÉr natural (0 ‚â§ n ‚â§ 1000000).   \n \nSubalgoritm cauta(n):  \n    v ‚Üê 0  \n    DacƒÉ n = 0 atunci  \n        returneazƒÉ  1 \n    altfel  \n        m ‚Üê n  \n        C√¢tTimp m > 0 executƒÉ  \n            DacƒÉ m MOD 10 = 0 atunci  \n                v ‚Üê v + 1  \n            SfDacƒÉ  \n            m ‚Üê m DIV 10 \n        SfC√¢tTimp  \n        returneazƒÉ  v \n   SfDacƒÉ \nSfSubalgoritm  \n \nPreciza »õi care dintre urmƒÉtoarele afirma »õii sunt adevƒÉrate:  \nA. Subalgoritmul determinƒÉ »ôi returneazƒÉ  c √¢te cifre are numƒÉrul n. \nB. Subalgoritmul returneazƒÉ 1 dacƒÉ numƒÉrul n este o putere a lui 10 »ôi 0 altfel.  \nC. Subalgoritmul returneazƒÉ 1 dacƒÉ numƒÉrul n se terminƒÉ cu cifra 0 »ôi 0 altfel.  \nD. Subalgoritmul determinƒÉ »ôi returneazƒÉ numƒÉrul de cifre 0 din numƒÉrul n. \n \n \n6. Se considerƒÉ subalgoritmul abc(a, n, p) , unde n este numƒÉr natural (1 ‚â§ n ‚â§ 10000), p este numƒÉr \n√Æntreg ( -10000 ‚â§ p ‚â§ 10000), iar a este un »ôir cu n numere naturale nenule ( a[1], a[2], ‚Ä¶, a[n]).  \n \nSubalgoritm  abc(a, n, p) : \n    DacƒÉ n < 1 atunci  \n        returneazƒÉ  0 \n    altfel  \n        DacƒÉ (1 ‚â§ p) »òI (p ‚â§ n) atunci  \n            returneazƒÉ  a[p] \n        altfel  \n            returneazƒÉ  -1 \n        SfDacƒÉ \n    SfDacƒÉ  \nSfSubalgoritm  3 \n  \nPreciza »õi care dintre urmƒÉtoarele afirma »õii sunt adevƒÉrate:  \n \nA. Subalgoritmul returneazƒÉ -1 dacƒÉ »ôi numai dacƒÉ p este negativ sau mai mare dec√¢t n. \nB. Subalgoritmul returneazƒÉ elementul de pe pozi»õia p dacƒÉ p este strict mai mare dec√¢t 0 »ôi mai \nmic sau egal dec√¢t lungimea »ôirului.  \nC. Subalgoritmul nu returneazƒÉ niciodatƒÉ 0 p entru valori ale parametri lor care respectƒÉ \nprecondi »õiile din enun »õ. \nD. Subalgoritmul returneazƒÉ elementul de pe pozi»õia p dacƒÉ p este mai mare sau egal cu 0 »ôi mai \nmic strict dec√¢t lungimea »ôirului. √én cazul √Æn care p nu este √Æntre 1 »ôi n, returneazƒÉ -1. \n \n \n7. Care dintre secven »õele urmƒÉtoare determinƒÉ √Æn variabila i lungimea unui »ôir de caractere care se \nterminƒÉ cu caracterul '*' (asterisc)? Primul caracter se aflƒÉ la indicele 1, iar caracterul asterisc este parte \na »ôirului  de caractere . \n \nA.  \ni ‚Üê 1 \nC√¢tTimp x[i] ‚â† '*' executƒÉ \n    i ‚Üê i + 1  \nSfC√¢tTimp  \nB.  \ni ‚Üê 1 \nC√¢tTimp x[i] = '*' executƒÉ \n    i ‚Üê i + 1  \nSfC√¢tTimp  \ni ‚Üê i - 1 \nC.  \ni ‚Üê 1 \nC√¢tTimp x[i] ‚â† '*' executƒÉ \n    i ‚Üê i + 1  \nSfC√¢tTimp  \ni ‚Üê i + 1  \nD.  \ni ‚Üê 1 \nC√¢tTimp x[i] ‚â† '*' executƒÉ \n    i ‚Üê i + 1  \nSfC√¢tTimp  \ni ‚Üê i - 1 \n \n \n8. Fie urmƒÉtorul subalgoritm, av √¢nd ca parametru numƒÉrul natural nenul n »ôi care returneazƒÉ un numƒÉr \nnatural .  \nSubalgoritm f(n): \n    j ‚Üê n  \n    C√¢tTimp j > 1 executƒÉ  \n       i ‚Üê 1  \n       C√¢tTimp i ‚â§ n executƒÉ  \n           i ‚Üê 2 * i  \n       SfC√¢tTimp  \n       j ‚Üê j DIV 3 \n    SfC√¢tTimp  \n    returneazƒÉ j \nSfSubalgoritm  \n \n√én care dintre urmƒÉtoarele clase de complexitate se √ÆncadreazƒÉ complexitatea timp a algoritmului ? \n \nA. O(log 2 ùíè) \nB. O(log 22 ùíè) \nC. O(log 32 ùíè) \nD. O(log 2 log 3 n) 4 \n 9. Subalgoritmul  cate(n, m) prime »ôte ca parametri numerele naturale n »ôi m. \n \nSubalgoritm cate(n, m):  \n    DacƒÉ n ‚â§ m atunci  \n        DacƒÉ (n MOD 2 = 0) »òI (n MOD 3 ‚â† 0) atunci  \n             returneazƒÉ 1 + cate(n + 1, m)  \n        altfel  \n             returneazƒÉ cate(n + 1, m)  \n        SfDacƒÉ  \n    altfel  \n       returneazƒÉ 0 \n    SfDacƒÉ  \nSfSubalgoritm  \n \nPreciza »õi care dintre urmƒÉtoarele afirma »õii sunt adevƒÉrate:  \n \nA. DacƒÉ n = 0 »ôi m = 1, subalgoritmul returneazƒÉ valoarea 0.  \nB. DacƒÉ n = 4 »ôi m = 21, subalgoritmul returneazƒÉ valoarea 6.  \nC. DacƒÉ n = 7 »ôi m = 120, subalgoritmul returneazƒÉ valoarea 36.  \nD. DacƒÉ n = 1 »ôi m = 215, subalgoritmul  returneazƒÉ valoarea 72.  \n \n \n10. Se considerƒÉ subalgoritmul verifica(n) , unde n este un numƒÉr natural (1 ‚â§ n ‚â§ 100000).  \n \nSubalgoritm verifica(n):  \n  C√¢tTimp n > 0 executƒÉ  \n    DacƒÉ (n MOD 3) > 1 atunci  \n      returneazƒÉ  0 \n    SfDacƒÉ  \n    n ‚Üê n DIV 3 \n  SfC√¢tTimp  \n  returneazƒÉ  1 \nSfSubalgoritm  \n \nPreciza »õi care dintre urmƒÉtoarele afirma »õii sunt adevƒÉrate:  \n \nA. Subalgoritmul returneazƒÉ 1 dacƒÉ n este o putere a lui 3, 0 √Æn caz contrar.  \nB. Subalgoritmul  returneazƒÉ 1 dacƒÉ scrierea √Æn baza 3 a lui n con»õine doar cifrele 0 »ôi/sau 1, 0 √Æn \ncaz contrar.  \nC. Subalgoritmul returneazƒÉ 1 dacƒÉ n poate fi scris ca sumƒÉ a puterilor distincte ale lui 3, 0 √Æn caz \ncontrar.  \nD. Subalgoritmul returneazƒÉ 1 dacƒÉ scrierea √Æn baza 3 a lui n con»õine doar cifra 2, 0 √Æn caz contrar.  \n \n \n11. Pentru un numƒÉr natural nr (1000 ‚â§ nr ‚â§ 1000000), definim opera »õia de decrementare √Æn modul \nurmƒÉtor: dacƒÉ ultima cifrƒÉ a lui nr nu este 0, scƒÉdem 1 din nr, altfel, √ÆmpƒÉr »õim nr la 10 »ôi pƒÉstrƒÉm doar \npartea √ÆntreagƒÉ. Care dintre urmƒÉtorii subalgoritmi returneazƒÉ, la apelul  decrementare(nr, \nk),  numƒÉrul ob »õinut aplic√¢nd de k ori (0 ‚â§ k ‚â§ 100) opera »õia de decrementare pe numƒÉrul nr? De \nexemplu, pentru nr = 15243 »ôi k = 10, rezultatul este 151. \n \nA.  \nSubalgoritm  decrementare(nr, k) : \n    DacƒÉ k = 0 atunci  \n        returneazƒÉ  nr \n    altfel  \n        DacƒÉ nr MOD 10 ‚â† 0 atunci  \n            returneazƒÉ  decrementare(nr DIV 10, k - 1) \n        altfel  \n            returneazƒÉ  decrementare(nr - 1, k - 1) \n        SfDacƒÉ  \n    SfDacƒÉ     \nSfSubalgoritm  5 \n B.  \nSubalgoritm  decrementare(nr, k) : \n    C√¢tTimp k > 0 executƒÉ  \n        DacƒÉ nr MOD 10 = 0 atunci  \n                   nr ‚Üê nr DIV 10 \n        altfel  \n            nr ‚Üê nr - 1 \n        SfDacƒÉ  \n    SfC√¢tTimp \n    returneazƒÉ  nr \nSfSubalgoritm  \n \nC.  \nSubalgoritm  decrementare(nr, k) : \n    Pentru i ‚Üê 1, k executƒÉ  \n        DacƒÉ nr MOD 10 > 0 atunci  \n            nr ‚Üê nr - 1 \n        altfel  \n            nr ‚Üê nr DIV 10 \n        SfDacƒÉ  \n    SfPentru  \n    returneazƒÉ  nr \nSfSubalgoritm  \n \nD.  \nSubalgoritm  decrementare(nr, k) : \n    DacƒÉ k = 0 atunci  \n        returneazƒÉ  nr \n    altfel  \n        DacƒÉ k > nr MOD 10 atunci  \n            nr1 ‚Üê nr DIV 10 \n            returneazƒÉ  decrementare(nr1,   k - nr MOD 10 - 1) \n        altfel  \n            returneazƒÉ  decrementare(nr - k, 0)  \n        SfDacƒÉ  \n    SfDacƒÉ  \nSfSubalgoritm  \n \n \n12. Se dƒÉ urmƒÉtorul subalgoritm care are ca parametri de intrare un »ôir x cu n numere naturale ( x[1], \nx[2], ‚Ä¶, x[n]) »ôi numƒÉrul √Æntreg n.  \nSubalgoritm  f(x, n): \n    DacƒÉ n = 1 atunci  \n        returneaz ƒÉ 100 \n    altfel  \n        DacƒÉ x[n] > f(x, n - 1) atunci  \n            returneaz ƒÉ x[n] \n        altfel  \n            returneazƒÉ  f(x, n - 1) \n        SfDacƒÉ \n    SfDacƒÉ \nSfSubalgoritm  \n \nCare va fi rezultatul execu »õiei subalgoritmului pentru x = [101, 7, 6, 3] »ôi n = 4? \n \nA. 101 \nB. 3 \nC. 100 \nD. 7 6 \n 13. Subalgoritmul de mai jos are ca parametri de intrare un »ôir a cu n numere naturale ( a[1], a[2], ‚Ä¶, \na[n]) »ôi numƒÉrul natural n (2 ‚â§ n ‚â§ 10000).  \nSubalgoritm  h(a, n): \n    DacƒÉ n ‚â§ 0 atunci   \n        returneaz ƒÉ 0 \n    SfDacƒÉ  \n    DacƒÉ (n MOD 2 = 0) »òI (a[n] MOD 2 = 0) atunci  \n        returneaz ƒÉ h(a, n - 1) + a[n]  \n    SfDacƒÉ \n    returneaz ƒÉ h(a, n - 1) - a[n] \nSfSubalgoritm  \n \nPreciza »õi care dintre urmƒÉtoarele afirma »õii sunt adevƒÉrate:  \n \nA. Subalgoritmul returneazƒÉ diferen »õa dintre suma elementelor care au aceea »ôi paritate cu pozi »õia \npe care se aflƒÉ »ôi suma elementelor care au paritate diferitƒÉ fa »õƒÉ de pozi »õia pe care se aflƒÉ din \n»ôirul a. \nB. Subalgoritmul returneazƒÉ diferen »õa dintre suma elementelor pare de pe pozi »õiile pare »ôi suma \nelementelor impare de pe pozi »õiile impare din »ôirul a. \nC. Subalgoritmul returneazƒÉ diferen »õa dintre suma elementelor pare »ôi suma elementelor impare \ndin »ôirul a. \nD. Subalgoritmul returneazƒÉ diferen »õa dintre suma elementelor pare de pe pozi »õii pare »ôi suma \ncelorlalte elemente din »ôirul a. \n \n \n14. Se considerƒÉ subalgoritmul ceFace(n) , cu parametrul n numƒÉr natural nenul . \n \nSubalgoritm ceFace(n):  \n    i ‚Üê 1  \n    C√¢tTimp n > 0 executƒÉ  \n        DacƒÉ n MOD 2 ‚â† 0 atunci  \n            scrie i \n        SfDacƒÉ  \n        i ‚Üê i + 1  \n        n ‚Üê n DIV 2 \n    SfC√¢tTimp  \nSfSubalgoritm  \n \nPreciza »õi care dintre urmƒÉtoarele afirma »õii sunt adevƒÉrate:  \n \nA. Subalgoritmul afi »ôeazƒÉ secven »õa: 12345  pentru n = 31.  \nB. Subalgoritmul afi »ôeazƒÉ secven »õa: 234 pentru n = 14.  \nC. Subalgoritmul afi »ôeazƒÉ 1 la √Ænceputul secven »õei, pentru n impar.  \nD. Subalgoritmul afi »ôeazƒÉ un singur numƒÉr pentru n = 2k , unde k este un numƒÉr natural.  \n \n \n15. Se dƒÉ o mul »õime S, care con »õine n intervale specificate prin capƒÉtul st√¢ng si »ôi capƒÉtul drept di (si < \ndi ‚àÄ i = 1... n). Se dore »ôte determinarea unei submul »õimi S‚Äô ‚äÜ S de m elemente, astfel √Ænc√¢t sƒÉ nu existe \ndouƒÉ intervale √Æn S‚Äô care se intersecteazƒÉ »ôi m sƒÉ aibƒÉ cea mai mare valoare posibilƒÉ.  \nCare dintre urmƒÉtoarele strategii rezolvƒÉ corect problema?  \n \nA. Se sorteazƒÉ intervalele din mul »õimea S crescƒÉtor dupƒÉ capƒÉtul st√¢ng. Se adaugƒÉ primul interval \ndin »ôirul sortat √Æn S‚Äô. Se parcurg celelalte elemente din »ôir √Æn ordinea sortatƒÉ »ôi c√¢nd se √Ænt√¢lne »ôte \nun interval care nu se intersecteazƒÉ cu intervalul care a fost adƒÉugat  ultima oarƒÉ √Æn S‚Äô, se adaugƒÉ \n»ôi acesta √Æn S‚Äô. \nB. Se sorteazƒÉ intervalele din mul »õimea S crescƒÉtor dupƒÉ capƒÉtul drept. Se adaugƒÉ primul interval \ndin »ôirul sortat √Æn S‚Äô. Se parcurg celelalte elemente din »ôir √Æn ordinea sortatƒÉ »ôi c√¢nd se √Ænt√¢lne »ôte \nun interval care nu se intersecteazƒÉ cu intervalul care a fost adƒÉugat ultima oarƒÉ √Æn S‚Äô, se adaugƒÉ \n»ôi acesta √Æn S‚Äô. 7 \n C.  Se sorteazƒÉ intervalele din mul »õimea S crescƒÉtor dupƒÉ lungimea intervalului. Se adaugƒÉ primul \ninterval din »ôirul sortat √Æn S‚Äô. Se parcu rg celelalte elemente din »ôir √Æn ordinea sortatƒÉ »ôi c√¢nd se \n√Ænt√¢lne »ôte un interval care nu se intersecteazƒÉ cu intervalul care a fost adƒÉugat ultima oarƒÉ √Æn S‚Äô, \nse adaugƒÉ »ôi acesta √Æn S‚Äô. \nD. Se sorteazƒÉ intervalele din mul »õimea S crescƒÉtor dupƒÉ numƒÉrul de int ervale din S cu care se \nintersecteazƒÉ. Se adaugƒÉ primul interval din »ôirul sortat √Æn S‚Äô. Se parcurg celelalte elemente din \n»ôir √Æn ordinea sortatƒÉ »ôi c√¢nd se √Ænt√¢lne »ôte un interval care nu se intersecteazƒÉ cu intervalul care \na fost adƒÉugat ultima oarƒÉ √Æn S‚Äô, se adaugƒÉ »ôi acesta √Æn S‚Äô. \n \n \n16. Se considerƒÉ subalgoritmul f(a, b) , care prime »ôte ca parametri douƒÉ numere naturale  a »ôi b (1 ‚â§ a \n< b ‚â§ 1000).  \n \nSubalgoritm  f(a, b):  \n    m ‚Üê 0  \n    Pentru n ‚Üê a, b executƒÉ  \n        c ‚Üê 0  \n        Pentru d ‚Üê 1, n executƒÉ  \n            DacƒÉ n MOD d = 0 atunci  \n                c ‚Üê c + 1  \n            SfDacƒÉ  \n        SfPentru  \n        DacƒÉ c > m atunci  \n            m ‚Üê c  \n        SfDacƒÉ  \n    SfPentru  \n \n    Pentru n ‚Üê a, b executƒÉ  \n        c ‚Üê 0  \n        Pentru d ‚Üê 1, n executƒÉ  \n            DacƒÉ n MOD d = 0 atunci  \n                c ‚Üê c + 1  \n            SfDacƒÉ  \n        SfPentru  \n        DacƒÉ c = m atunci  \n            scrie n \n        SfDacƒÉ  \n    SfPentru  \nSfSubalgoritm  \n         \nPreciza »õi care dintre urmƒÉtoarele afirma »õii sunt adevƒÉrate:  \n \nA. Subalgoritmul afi »ôeazƒÉ maximul dintre numƒÉrul de divizori ai lui a »ôi numƒÉrul de divizori ai \nlui b. \nB. Subalgoritmul afi »ôeazƒÉ numerele naturale din intervalul [ a, b] care au proprietatea cƒÉ au cel \nmai mare numƒÉr de divizori.  \nC. Subalgoritmul afi »ôeazƒÉ numƒÉrul de divizori pentru fiecare numƒÉr natural din intervalul [ a, b]. \nD. Subalgoritmul afi »ôeazƒÉ numerele naturale din intervalul [ a, b] care au proprietatea cƒÉ au cel \nmai mare numƒÉr de divizori proprii.  \n \n17. Fie numerele naturale a »ôi b, cu b ‚â† 0. Care dintre urmƒÉtoarele variante calculeazƒÉ:  \n‚Ä¢ a DIV b, dacƒÉ a MOD b = 0  \n‚Ä¢ (a / b)  rotunjit √Æn sus cƒÉtre cel mai apropiat √Æntreg, dacƒÉ a MOD b ‚â† 0  \n \nA. (a - 1) DIV b \nB. (a + b + 1) DIV b \nC. (a + b - 1) DIV b \nD. ((a + 2 * b - 1) DIV b) - 1 8 \n 18.  Ionel trebuie sƒÉ implementeze algoritmul de cƒÉutare binarƒÉ a unui element a √Æntr-un »ôir V cu n (1 ‚â§ \nn ‚â§ 1000) numere √Æntregi ordonate crescƒÉtor ( V[1], V[2], ‚Ä¶, V[n]). El scrie urmƒÉtorul   subalgoritm : \n \nSubalgoritm CautareBinara(a, n, V):   \n     st ‚Üê 1  \n     dr ‚Üê n  \n     C√¢ttimp dr ‚Äì st > 1 executƒÉ  \n          m ‚Üê (st + dr) DIV 2 \n          DacƒÉ a ‚â§ V[m] atunci  \n               dr ‚Üê m  \n          altfel  \n               st ‚Üê m  \n          SfDacƒÉ  \n     SfC√¢ttimp  \n     returneazƒÉ  dr  \nSfSubalgoritm   \n \nPreciza»õi care dintre urmƒÉtoarele afirma»õii sunt adevƒÉrate:  \n \nA. DacƒÉ n = 1 atunci valoarea returnatƒÉ de subalgoritm  este √Æntotdeauna 1.  \nB. Pentru orice n ‚â• 1, subalgoritmul scris de Ionel returneazƒÉ valoarea 1 atunci c√¢nd a este mai \nmic dec√¢t toate elementele din »ôir.  \nC. Atunci c√¢nd elementul a apare √Æn »ôir, subalgoritmul scris de Ionel NU returneazƒÉ √Æntotdeauna \npozi»õia (indicele √Æn vectorul V) pe care acesta apare.  \nD. Pentru orice  n > 1, subalgoritmul scris de Ionel returneazƒÉ valoarea n atunci c√¢nd a este mai \nmare dec√¢t toate elementele din »ôir.  \n \n \n19. Se considerƒÉ subalgoritmul calcul(x, n) , unde parametrii de intrare sunt numerele naturale n »ôi x, \ncu condi »õia 1 ‚â§ x ‚â§ n < 10.  \n \nSubalgoritm calcul(x, n) : \n    b ‚Üê 1  \n    Pentru i ‚Üê 1, n - x executƒÉ  \n        b ‚Üê b * i  \n    SfPentru  \n    a ‚Üê b  \n    Pentru i ‚Üê n ‚Äì x + 1, n executƒÉ  \n        a ‚Üê a * i  \n    SfPentru  \n    returneazƒÉ a DIV b \nSfSubalgoritm  \n \nPreciza »õi care dintre urmƒÉtoarele afirma »õii sunt adevƒÉrate:  \n \nA. DacƒÉ n = 5 »ôi x = 2, atunci subalgoritmul returneazƒÉ 20.  \nB. DacƒÉ n = 3 »ôi x = 2, atunci subalgoritmul returneazƒÉ 6.  \nC. Subalgoritmul  returneazƒÉ  cardinalitatea mul »õimii { ùëê1ùëê2‚Ä¶ùëêùë•  : ci ‚â† cj ‚àÄ 1 ‚â§ i, j ‚â§ x, i ‚â† j,  1 ‚â§ ci \n‚â§ n} \nD. Subalgoritmul efectueazƒÉ n opera »õii de √Ænmul »õire. \n \n20. Se considerƒÉ subalgoritmul  ceFace(n,k) , care prime»ôte ca »ôi parametru douƒÉ numere naturale nenule \nn »ôi k (1 ‚â§ n, k ‚â§ 100 0000).  \n  \nSubalgoritm ceFace(n, k):  \n    C√¢ttimp n ‚â• 1 executƒÉ  \n        DacƒÉ k ‚â§ n atunci    \n            i ‚Üê k  \n        altfel  \n            i ‚Üê n  \n        SfDacƒÉ  9 \n         n ‚Üê n - i \n        x ‚Üê 1  \n        C√¢ttimp i ‚â• 1 executƒÉ  \n            Scrie x,‚Äô ‚Äô   \n            x ‚Üê x + 1  \n            i ‚Üê i - 1 \n        SfC√¢ttimp  \n    SfC√¢ttimp  \nSfSubalgoritm  \n \nPreciza»õi care dintre urmƒÉtoarele afirma»õii sunt adevƒÉrate:  \n \nA. Pentru n = 8 »ôi k = 3 subalgoritmul afi»ôeazƒÉ  »ôirul 1 2 3 1 2 3 1 2  \nB. Pentru k = 2, cea mai micƒÉ valoare a lui n pentru care se afi»ôeazƒÉ de 3 ori valoarea 1 pe ecran \neste n = 3. \nC. Pentru k = 5, cea mai micƒÉ valoare a lui n pentru care se afi»ôeazƒÉ de 37 ori valoarea 2 pe ecran \neste n = 182 . \nD. Pentru n = 7 »ôi k = 3 subalgoritmul afi»ôeazƒÉ 1 2 3 1 2 3  \n \n \n21. Se considerƒÉ subalgoritmul calculeaza(a, b, c) , cu parametrii de intrare numere naturale nenule, \ncare calculeazƒÉ cel mai mare divizor comun al celor trei numere.  \nCare dintre urmƒÉtoarele sunt implementƒÉri corecte ale subalgoritmului:  \n \nA.  \nSubalgoritm  calculeaza(a, b, c):  \n    C√¢tTimp (a ‚â† b) SAU (a ‚â† c) SAU (b ‚â† c) executƒÉ  \n        x ‚Üê a  \n        DacƒÉ a ‚â† x atunci    \n            a ‚Üê a - x  \n        SfDacƒÉ  \n        DacƒÉ b ‚â† x atunci    \n            b ‚Üê b - x  \n        SfDacƒÉ  \n        DacƒÉ c ‚â† x atunci    \n            c ‚Üê c - x  \n        SfDacƒÉ  \n    SfC√¢tTimp  \n    returneazƒÉ  x \nSfSubalgoritm  \n \nB.  \nSubalgoritm  calculeaza(a, b, c):  \n    x ‚Üê a  \n    y ‚Üê b  \n    C√¢tTimp x ‚â† y executƒÉ  \n        DacƒÉ x > y atunci    \n            x ‚Üê x - y  \n        altfel  \n            y ‚Üê y - x \n        SfDacƒÉ  \n    SfC√¢tTimp  \n    z ‚Üê c  \n    C√¢tTimp x ‚â† z executƒÉ  \n        DacƒÉ x > z atunci    \n            x ‚Üê x - z  \n        altfel  \n            z ‚Üê z - x \n        SfDacƒÉ  \n    SfC√¢tTimp  \n    returneazƒÉ  x \nSfSubalgoritm  \n 10 \n C.  \nSubalgoritm  calculeaza(a, b, c) : \n    C√¢tTimp (a ‚â† b) SAU (a ‚â† c) SAU (b ‚â† c) executƒÉ  \n        x ‚Üê a  \n        DacƒÉ b < x atunci    \n            x ‚Üê b  \n        SfDacƒÉ  \n        DacƒÉ c < x atunci    \n            x ‚Üê c  \n        SfDacƒÉ  \n        DacƒÉ a ‚â† x atunci    \n            a ‚Üê a - x  \n        SfDacƒÉ  \n        DacƒÉ b ‚â† x atunci    \n            b ‚Üê b - x  \n        SfDacƒÉ  \n        DacƒÉ c ‚â† x atunci    \n            c ‚Üê c - x  \n        SfDacƒÉ  \n    SfC√¢tTimp  \n    returneazƒÉ  x \nSfSubalgoritm  \n \nD.  \nSubalgoritm  calculeaza(a, b, c) : \n    x ‚Üê a  \n    y ‚Üê b  \n    r ‚Üê x MOD y \n    C√¢tTimp r ‚â† 0 executƒÉ  \n        x ‚Üê y  \n        y ‚Üê r  \n        r ‚Üê x MOD y \n    SfC√¢tTimp  \n    z ‚Üê c  \n    r ‚Üê y MOD z \n    C√¢tTimp r ‚â† 0 executƒÉ  \n        y ‚Üê z  \n        z ‚Üê r  \n        r ‚Üê y MOD z \n   SfC√¢tTimp  \n   returneazƒÉ  z \nSfSubalgoritm  \n \n \n22. Subalgoritmul ceFace(n)  are ca parametru numƒÉrul natural n (1 ‚â§ n ‚â§ 100).   \n \nSubalgoritm  ceFace(n):  \n    s ‚Üê 0  \n    DacƒÉ n MOD 2 = 0 atunci  \n        a ‚Üê 1  \n        C√¢tTimp a < n executƒÉ  \n            s ‚Üê s + a  \n            a ‚Üê a + 2  \n        SfC√¢tTimp  \n    altfel  \n        b ‚Üê 2  \n        C√¢tTimp b < n executƒÉ  \n            s ‚Üê s + b  \n            b ‚Üê b + 2  \n        SfC√¢tTimp  \n    SfDacƒÉ  \n    returneazƒÉ  s \nSfSubalgoritm  \n \nPreciza »õi care dintre urmƒÉtoarele afirma »õii sunt adevƒÉrate:  11 \n  \nA. DacƒÉ n este par, subalgor itmul returneazƒÉ suma numerelor naturale mai mici strict dec√¢t n; dacƒÉ \nn este impar, returneazƒÉ suma numerelor naturale pare mai mici dec√¢t n. \nB. DacƒÉ n este par, subalgor itmul returneazƒÉ suma numerelor naturale pare mai mici strict dec√¢t \nn; dacƒÉ n este impar, returneazƒÉ suma numerelor naturale impare mai mici dec√¢t n. \nC. DacƒÉ n este par, subalgor itmul returneazƒÉ suma numerelor naturale impare mai mici dec√¢t n; \ndacƒÉ n este impar, returneazƒÉ suma numerelor naturale pare mai mici dec√¢t n. \nD. DacƒÉ n este par , subalgori tmul returneazƒÉ suma numerelor naturale pare mai mici strict dec√¢t \nn; dacƒÉ n este impar, returneazƒÉ suma numerelor naturale mai mici strict dec√¢t n. \n \n \n23. Subalgoritmul ceFace(a)  prime »ôte ca parametru numƒÉrul natural a (1 ‚â§ a ‚â§ 100000).  \n \nSubalgoritm ceFace(a) : \n    b ‚Üê 0  \n    c ‚Üê 0  \n    d ‚Üê 0  \n    e ‚Üê 1  \n    CatTimp a > 0 executƒÉ  \n        d ‚Üê a MOD 10 \n        DacƒÉ (d ‚â† 4) »òI (d < 7) atunci  \n            b ‚Üê b + e * (d DIV 2) \n            c ‚Üê c + e * (d - d DIV 2) \n        altfel  \n            b ‚Üê b + e  \n            c ‚Üê c + e * (d - 1)  \n        SfDacƒÉ  \n        a ‚Üê a DIV 10 \n        e ‚Üê e * 10  \n    SfC√¢tTimp  \n    Scrie b \n    Scrie c \nSfSubalgoritm  \n \nCare dintre urmƒÉtoarele perechi de valori nu vor fi afi »ôate pentru nici  o valoare de intrare validƒÉ?  \n \nA. 1112 »ôi 11233  \nB. 1111 »ôi 88888  \nC. 21001 »ôi 33011  \nD. 3141 »ôi 3258  \n \n \n24. Se considerƒÉ subalgoritmii f(n, c)  »ôi g(n, c) , care primesc ca parametri numerele naturale n »ôi c. \n \nSubalgoritm f(n, c): \n    DacƒÉ n ‚â§ 9 atunci  \n        DacƒÉ n = c atunci  \n            returneazƒÉ 1 \n        altfel          \n            returneazƒÉ 0 \n        SfDacƒÉ  \n    altfel  \n        DacƒÉ n MOD 10 = c atunci  \n            returneazƒÉ f(n DIV 10, c) + 1   \n        altfel  \n            returneazƒÉ  f(n DIV 10, c)  \n        SfDacƒÉ  \n    SfDacƒÉ  \nSfSubalgoritm  \n 12 \n Subalgoritm g(n, c): \n    DacƒÉ c = 0 atunci  \n        returneazƒÉ 0 \n    altfel  \n        DacƒÉ f(n, c) > 0 atunci  \n            returneazƒÉ g(n, c - 1) + 1  \n        altfel  \n            returneazƒÉ  g(n, c - 1) \n        SfDacƒÉ  \n    SfDacƒÉ  \nSfSubalgoritm  \n \nCe returneazƒÉ apelul g(n, 9) ? \n \nA. ReturneazƒÉ numƒÉrul de cifre ale numƒÉrului n. \nB. ReturneazƒÉ numƒÉrul de cifre distincte ale numƒÉrului n. \nC. ReturneazƒÉ numƒÉrul de cifre mai mari dec√¢t 1 ale numƒÉrului n. \nD. Niciunul din tre celelalte r«éspunsuri nu este corect . \n \n25.  Pe un site fiecare utilizator √Ænregistrat are √Æn loc de parolƒÉ un cod secret alcƒÉtuit din n cifre. Pentru \na se loga pe site, utilizatorul nu trebuie sƒÉ introducƒÉ codul complet, ci pagina genereazƒÉ aleator 3 pozi»õii \ndistincte, p1, p2 »ôi p3,  astfel √Ænc√¢t 1 ‚â§ p1 < p2 < p3 ‚â§ n iar utilizatorul trebuie sƒÉ introducƒÉ doar cifrele \nde pe acele 3 pozi»õii. De exemplu, dacƒÉ codul utilizatorului este 987654321 »ôi pagina genereazƒÉ aleator \npozi»õiile 2, 5 »ôi 7, utilizatorul trebuie sƒÉ introducƒÉ cifrele 8, 5, 3.   \nMai jos ave»õi valorile intro duse de un utilizator pentru 9 logƒÉri pe aceastƒÉ paginƒÉ.   \n1, 2, 3  \n2, 9, 0  \n6, 3, 2  \n2, 0, 2  \n1, 4, 7  \n9, 3, 2  \n4, 4, 3  \n4, 3, 1  \n5, 6, 0  \nPresupun√¢nd cƒÉ toate cele 9 logƒÉri sunt valide »ôi codul utilizatorului nu a fost schimbat √Æntre timp, \npreciza»õi care dintre urmƒÉtoarele afirma»õii sunt adevƒÉrate.   \n \nA. Codul utilizatorului sigur nu con»õine cifra 8.  \nB. Cel mai scurt cod posibil are 12 cifre.  \nC. Cel mai scurt cod posibil con»õine cifra 2 de minimum 3 ori.  \nD. Suma cifrelor √Æn cel mai scurt cod posibil poate fi 44.  \n \n \n26. Se considerƒÉ subalgoritmul  f(x, n)  unde x, n sunt numere naturale »ôi x > 0.  \n \nSubalgoritm  f(x, n): \n    DacƒÉ n = 0 atunci  \n        returneazƒÉ  1 \n    SfDacƒÉ  \n    m ‚Üê n DIV 2 \n    p ‚Üê f(x, m)  \n    DacƒÉ n MOD 2 = 0 atunci  \n        returneazƒÉ  p * p  \n    SfDacƒÉ  \n    returneazƒÉ  x * p * p  \nSfSubalgoritm  \n \nPreciza »õi care dintre urmƒÉtoarele afirma »õii sunt adevƒÉrate:  13 \n A. Subalgoritmul returneazƒÉ xn. \nB. DacƒÉ √Æn loc de ‚Äú n MOD 2‚Äù ar fi ‚Äúm MOD 2‚Äù atunci subalgoritmul ar returna xn. \nC. Liniile dupƒÉ autoapelul func »õiei nu se vor executa niciodatƒÉ.  \nD. Subalgoritmul returneazƒÉ xn dacƒÉ »ôi numai dacƒÉ n este par.  \n \n27. Se considerƒÉ subalgoritmul f2(a,b)  cu parametrii a »ôi b numere naturale, »ôi subalgoritmul f(arr, \ni, n, p)  av√¢nd ca parametri »ôirul arr cu n numere √Æntregi ( arr[1], arr[2], ‚Ä¶, arr[n]), »ôi numerele √Æntregi \ni »ôi p.  \nSubalgoritm  f2(a, b) : \n    DacƒÉ a > b atunci  \n        returneazƒÉ  a \n    altfel  \n        returneazƒÉ  b \n    SfDacƒÉ  \nSfSubalgoritm  \n \nSubalgoritm  f(arr, i, n, p) : \n    DacƒÉ i = n atunci  \n        returneazƒÉ  0 \n    SfDacƒÉ  \n    n1 ‚Üê f(arr, i + 1, n, p)  \n    n2 ‚Üê 0  \n    DacƒÉ p + 1 ‚â† i atunci  \n        n2 ‚Üê f(arr, i + 1, n, i) + arr[i]  \n    SfDacƒÉ  \n    returneazƒÉ  f2(n1, n2)  \nSfSubalgoritm  \n \nPreciza »õi care este rezultatul apelului f(arr, 1, 9, -10), dacƒÉ »ôirul arr con»õine valorile (10, 1, 3, 4, \n8, 12, 1, 11, 6).  \n \nA. 24 \nB. 37 \nC. 26 \nD. 56 \n \n28. Fie subalgoritmul verifica(n) , care prime »ôte ca parametru un numƒÉr √Æntreg n (1 ‚â§ n ‚â§ 100000) »ôi \nreturneazƒÉ adevƒÉrat dacƒÉ n con»õine o cifrƒÉ care este egalƒÉ cu suma celorlalte cifre. De exemplu, \nverifica(1517)  returneazƒÉ adevƒÉrat pentru cƒÉ 7 = 1 + 5 + 1.   \nCare din urmƒÉtoarele variante reprezintƒÉ implementƒÉri corecte ale subalgoritmului verifica(n) ? \n \nA.  \nSubalgoritm  verifica(n) : \n    s ‚Üê 0  \n    c ‚Üê n  \n    r ‚Üê fals  \n    C√¢tTimp c > 0 executƒÉ  \n        s ‚Üê s + c MOD 10 \n        c ‚Üê c DIV 10 \n    SfC√¢tTimp  \n    c ‚Üê n  \n    C√¢tTimp c > 0 executƒÉ  \n        d ‚Üê c MOD 10 \n        DacƒÉ d = s - d atunci  \n            r ‚Üê adevƒÉrat  \n        altfel     \n            r ‚Üê fals \n        SfDaca  \n        c ‚Üê c DIV 10 \n    SfC√¢tTimp  \n    returneazƒÉ  r \nSfSubalgoritm  14 \n B.  \nSubalgoritm  verifica(n) : \n    m ‚Üê -1 \n    c ‚Üê n  \n    r ‚Üê fals   \n    C√¢tTimp c > 0 executƒÉ  \n        d ‚Üê c MOD 10 \n        c ‚Üê c DIV 10 \n        DacƒÉ d > m atunci  \n            m ‚Üê d  \n        SfDacƒÉ  \n    SfC√¢tTimp  \n    c ‚Üê n  \n    s ‚Üê 0  \n    C√¢tTimp c > 0 executƒÉ  \n        d ‚Üê c MOD 10 \n        DacƒÉ d ‚â† m atunci     \n            s ‚Üê s + d  \n        SfDacƒÉ  \n        c ‚Üê c DIV 10 \n    SfC√¢tTimp  \n    DacƒÉ s = m atunci  \n        r ‚Üê adevƒÉrat   \n    SfDacƒÉ  \n    returneazƒÉ  r \nSfSubalgoritm  \n \nC.  \nSubalgoritm  verifica(n) : \n    v ‚Üê [0,0,0,0,0,0,0,0,0]  \n    r ‚Üê fals  \n    C√¢tTimp n > 0 executƒÉ  \n        d ‚Üê n MOD 10 \n        DacƒÉ d > 0 atunci  \n            v[d] ‚Üê v[d] + 1  \n        SfDacƒÉ  \n        n ‚Üê n DIV 10 \n    SfC√¢tTimp  \n    m ‚Üê 9  \n    C√¢tTimp v[m] = 0 executƒÉ  \n        m ‚Üê m - 1 \n    SfC√¢tTimp  \n    DacƒÉ v[m] = 1 atunci  \n        d ‚Üê m  \n        s ‚Üê 0  \n        m ‚Üê m - 1 \n        C√¢tTimp m > 0 executƒÉ  \n            s ‚Üê s + v[m] * m  \n            m ‚Üê m - 1 \n        SfC√¢tTimp  \n        DacƒÉ d = s atunci  \n            r ‚Üê adevarat  \n        SfDacƒÉ  \n    SfDacƒÉ  \n    returneazƒÉ  r \nSfSubalgoritm  \n \nD. Niciuna dintre celelalte variante nu este corectƒÉ . \n \n \n29. Se considerƒÉ subalgoritmul f(x, n, e, y, m) , care prime »ôte ca parametri un »ôir x cu n elemente \nnumere √Æntregi ( x[1], x[2], ‚Ä¶, x[n]), un »ôir y cu m elemente numere √Æntregi ( y[1], y[2], ‚Ä¶, y[m]), »ôi un \nnumƒÉr √Æntreg e care nu apar »õine »ôirului y. Subalgoritmul returneazƒÉ un »ôir »ôi un numƒÉr natural. Se dau \nsubalgoritmii:  15 \n ‚Ä¢ (c, p) ‚Üê concatenare(a, n, b, m)  care are ca parametri de intrare un »ôir a cu n elemente \nnumere √Æntregi »ôi un »ôir b cu m elemente numere √Æntregi, »ôi returneazƒÉ »ôirul c cu p elemente \nnumere √Æntregi care reprezintƒÉ concatenarea celor douƒÉ »ôiruri a »ôi b, adicƒÉ: a[1], a[2], ‚Ä¶, a[n], \nb[1], b[2], ‚Ä¶, b[m] \n‚Ä¢ (c, p) ‚Üê diferen»õƒÉ(a, n, b, m) care are ca parametri de intrare un »ôir a cu n elemente \nnumere √Æntregi »ôi un »ôir b cu m elemente numere √Æntregi,   »ôi returneazƒÉ »ôirul c cu p elemente \nnumere √Æntregi care con »õine toate elementele din »ôirul a (elementele rƒÉmase √Æn »ôir pƒÉstr√¢ndu -\n»ôi ordinea ini »õialƒÉ) care nu sunt √Æn »ôirul b \n \n1. Subalgoritm  f(x, n, e, y, m):  \n2.     DacƒÉ n = 0 atunci  \n3.         returneazƒÉ  [], 0  \n4.     SfDacƒÉ \n5.     DacƒÉ x[1] ‚â† e atunci  \n6.         s ‚Üê [] \n7.         s[1] ‚Üê x[1] \n8.         (r1, l1) ‚Üê diferen»õƒÉ(x, n, s, 1)  \n9.         (r2, l2) ‚Üê f(r1, l1, e, y, m)  \n10.         (r3, l3) ‚Üê concatenare(s, 1, r2, l2)  \n11.         returneazƒÉ  r3, l3 \n12.     altfel   \n13.         (r1, l1) ‚Üê f(y, m, e, x, n)  \n14.         s ‚Üê [] \n15.         s[1] ‚Üê x[1] \n16.         (r2, l2) ‚Üê diferen»õƒÉ(x, n, s, 1)  \n17.         (r3, l3) ‚Üê f(r2, l2, e, y, m)  \n18.         (r4, l4) ‚Üê concatenare(r1, l1, r3, l3)  \n19.         returneazƒÉ  r4, l4 \n20.     SfDacƒÉ \n21. SfSubalgoritm   \n \nPreciza »õi care dintre urmƒÉtoarele afirma »õii sunt adevƒÉrate:  \n \nA. Subalgoritmul f(x, n, e, y, m)  construie »ôte un tablou unidimensional pornind de la »ôirul x √Æn \ncare apari »õiile elementului e sunt »ôterse »ôi √Æn locul fiecƒÉrei apari »õii sunt inserate elementele din \ny. Subalgoritmul  returneazƒÉ tabloul construit »ôi dimensiunea acestuia.  \nB. DacƒÉ »ôirurile x »ôi y nu au elemente comune, atunci »ôirul returnat de subalgoritmul f(x, n, e, \ny, m)  va con »õine doar elemente distincte.   \nC. Lungimea »ôirului returnat  de subalgoritmul f(x, n, e, y, m),  av√¢nd ca parametri de intrare \n»ôirurile x »ôi y nevide , poate fi mai micƒÉ dec√¢t n. \nD. DacƒÉ pe linia 18, √Æn loc de r1 »ôi l1 am avea y »ôi m atunci func »õia ar returna un tablou \nunidimensional ( »ôi dimensiunea lui) care ar √Æncepe cu elementele din y, urmate \nde  elementele din x, apari »õiile lui e fiind √Ænlocuite de elementele din y. \n \n \n30. Se dƒÉ subalgoritmul s(a, b, c), unde a, b, c sunt numere naturale nenule , b ‚â• a \n \nSubalgoritm s(a, b, c):  \n    DacƒÉ c = 0 atunci  \n        returneazƒÉ  1 \n    altfel  \n        DacƒÉ a > b atunci  \n            returneazƒÉ (1 / a) * s(a - 1, b, c)  \n        altfel  \n            DacƒÉ a < b atunci  \n                returneazƒÉ (1 / b) * s(a, b - 1, c)  \n            altfel  \n                returneazƒÉ  c * s(a - 1, b - 1, c - 1)  \n            SfDacƒÉ  \n        SfDacƒÉ  \n    SfDacƒÉ  \nSfSubalgoritm  16 \n  \nCare trebuie sƒÉ fie rela »õia dintre a, b »ôi c pentru a se ob »õine 1/ Cba (unde Cba reprezintƒÉ combinƒÉri de b \nelemente luate c√¢te a) \n \nA. a + b = c  \nB. a + c = b  \nC. b - c = a  \nD. b + c = a - b \n \n \n \n \n \n \n \n \n \n \n UNIVERSITATEA BABE»ò -BOLYAI CLUJ -NAPOCA  \nFACULTATEA DE MATEMATICƒÇ »òI INFORMATICƒÇ  \n \nConcurs de Admitere 19 iulie 2021  \nProba scrisƒÉ la INFORMATICƒÇ  \nBAREM »òI REZOLVARE  \nOFICIU : 10 puncte  \n1 A, C 3 puncte  \n2 B 3 puncte  \n3 C 3 puncte  \n4 D 3 puncte  \n5 D 3 puncte  \n6 B,C 3 puncte  \n7 A 3 puncte  \n8 B, C 3 puncte  \n9 A,B,D  3 puncte  \n10 B, C 3 puncte  \n11 C, D 3 puncte  \n12 C 3 puncte  \n13 D 3 puncte  \n14 A, B, C, D  3 puncte  \n15 B 3 puncte  \n16 B 3 puncte  \n17 C, D 3 puncte  \n18 A, C, D  3 puncte  \n19 A, B, C, D  3 puncte  \n20 A,C 3 puncte  \n21 B, D 3 puncte  \n22 C 3 puncte  \n23 B, D 3 puncte  \n24 D 3 puncte  \n25 B, D 3 puncte  \n26 A 3 puncte  \n27 B 3 puncte  \n28 D 3 puncte  \n29 B, C 3 puncte  \n30 B, C 3 puncte  \n \n ",
    [
        {
            "question": "  Let us consider  the algorithm  magic(x) , where x is a natural number (1 ‚â§ x ‚â§ 32000). Which of the following statements are true? ",
            "answers": [
                {
                    "A": "For any input value x strictly less than 10 the algorithm  returns False ."
                },
                {
                    "B": "The algorithm  decomposes the number  x into its  prime factors ."
                },
                {
                    "C": "The algorithm  returns True  if the number  x is a perfect square ."
                },
                {
                    "D": "The algorithm  does not return True for any valid value of input parameter x."
                }
            ],
            "code": "Algorithm magic(x):\n    st ‚Üê 1\n    dr ‚Üê x\n    While st ‚â§ dr execute\n        mj ‚Üê (st + dr) DIV 2\n        If mj * mj = x then\n            return True\n        EndIf\n        If mj * mj < x then\n            st ‚Üê mj + 1\n        else\n            dr ‚Üê mj ‚Äì 1\n        EndIf\n    EndWhile\n    return False\nEndAlgorithm",
            "index": 1
        },
        {
            "question": "  Let us consider the algorithm calculeaza(a,b) , where a and b are natural numbers (1 ‚â§ a, b ‚â§ 10000). Which of the following statements are true? ",
            "answers": [
                {
                    "A": "If a = 107 and b = 101, the algorithm returns the value 107."
                },
                {
                    "B": "If a = 1001 and b  = 101, the algorithm returns the value 1001."
                },
                {
                    "C": "For all algorithm calls with 1 ‚â§ a ‚â§ 10000 and b = 101, the returned value is equal to a."
                },
                {
                    "D": "For all algorithm calls with a = 1001 and 1 ‚â§ b ‚â§ 10000, the returned value is equal to 1001."
                }
            ],
            "code": "Algorithm calculeaza (a, b):\nx ‚Üê 1\nFor i ‚Üê 1, b execute\nx ‚Üê (x MOD 10) * a\nEndFor\nreturn x\nEndAlgorithm",
            "index": 2
        },
        {
            "question": "Let us consider the algorithm afis(n) , where n is a natural number (0 ‚â§  n ‚â§  10000). Which of the following statements are true for the call afis(n) ? ",
            "answers": [
                {
                    "A": "The algorithm prints an array of numbers in which the first element is equal to the last element, the\nsecond element is equal to the second to last element, etc  (except for the middle elemen t)."
                },
                {
                    "B": "The algorithm prints an array of even numbers."
                },
                {
                    "C": "The algorithm prints an array of numbers in ascending order followed by numbers in descending\norder."
                },
                {
                    "D": "The algorithm prints an array of numbers in descending order followed by numbers in ascending\norder."
                }
            ],
            "code": "Algorithm afis(n):\n    Write n, \" \"\n    If n > 0 then\n        afis(n DIV 2)\n        Write n, \", \"\n    EndIf\nEndAlgorithm",
            "index": 3
        },
        {
            "question": "Let us consider the algorithm cauta(n, b), where n and b are natural number s (0 ‚â§ n ‚â§ 106, 2 ‚â§ b < 10). Which of the fol lowing statements are true? ",
            "answers": [
                {
                    "A": "The algorithm computes and returns the number of digits of n."
                },
                {
                    "B": "The algorithm returns 1 if the number n is a power of b and 0 otherwise."
                },
                {
                    "C": "The algorithm computes and returns the number of digits equal to 0 from the representation in\nbase b of number n."
                },
                {
                    "D": "The a lgorithm returns 1 if number n ends in digit b and 0 otherwise."
                }
            ],
            "code": "Algorithm cauta(n, b):\nv ‚Üê 0\nIf n = 0 then\nreturn 1\nelse\nm ‚Üê n\nWhile m > 0 execute\nIf m MOD b = 0 then\nv ‚Üê v + 1\nEndIf\nm ‚Üê m DIV b\nEndWhile\nreturn v\nEndIf\nEndAlgorithm",
            "index": 4
        },
        {
            "question": "Let us consider  the algorithm  abc(a, n, p) , where n is a natural number (1 ‚â§ n ‚â§ 10000), p is an integer number (-10000 ‚â§ p ‚â§ 10000), and a is an array of  n non-zero natural numbers  (a[1], a[2], ‚Ä¶, a[n]). Which of the following statements are true? ",
            "answers": [
                {
                    "A": "The algorithm  returns 0 if and only if p is a negative number or is greater than n."
                },
                {
                    "B": "The algorithm  returns  the element on position p if p is strictly greater than 0 and less than or\nequal to the length of the array ."
                },
                {
                    "C": "The algorithm  never returns  0 for parameter values that meet the given preconditions ."
                },
                {
                    "D": "The algorithm  returns  the element at position p if p is greater than or equal to 0 and strictly less\nthan the length of the array ."
                }
            ],
            "code": "Algorithm abc(a, n, p):\n    If n < 1 then\n        return -1\n    else\n        If (1 ‚â§ p) AND (p ‚â§ n) then\n            return a[p]\n        else\n            return 0\n        EndIf\n    EndIf\nEndAlgorithm",
            "index": 5
        },
        {
            "question": "In order to generate al the numbers with n digits composed  only of digits 0, 6, 7,  there is an algorithm which, for  n = 2, generates in ascending order the numbers 60, 66, 67, 70, 76, 77. If n = 4 and the same algorithm is used, what is the number generated immediately after the number 6767? ",
            "answers": [
                {
                    "A": "7667"
                },
                {
                    "B": "6760"
                },
                {
                    "C": "6776"
                },
                {
                    "D": "None of the other variants are correct ."
                }
            ],
            "code": "",
            "index": 6
        },
        {
            "question": "For a natural number nr (1000 ‚â§ nr ‚â§ 1000000), we define the decrement operation as follows: if the last digit of nr is not 0, we subtract 1 from nr, otherwise, we divide nr by 10 and we keep the integer part of the quotient. Which of the following algorithms,  for the call  decrementare(nr, k) ,  return the number obtained by applying the decrement operation k times (0 ‚â§ k ‚â§ 100) on the number nr? For example, for nr = 15243 and k = 10, the result will be 151. ",
            "answers": [
                {
                    "A": "Algorithm decrementare(nr, k):\nIf k = 0 then\nreturn nr\nelse\nIf nr MOD 10 ‚â† 0 then\nreturn decrementare(nr - 1, k - 1)\nElse\nreturn decrementare(nr DIV 10, k - 1)\nEndIf\nEndIf\nEndAlgorithm"
                },
                {
                    "B": "Algorithm decrementare(nr, k):\n    While k > 0 execute\n        If nr MOD 10 = 0 then\n            nr ‚Üê nr DIV 10\n        else\n            nr ‚Üê nr - 1\n        EndIf\n  k ‚Üê k - 1\n    EndWhile\n    return nr\nEndAlgorithm"
                },
                {
                    "C": "Algorithm decrementare(nr, k):\nFor i ‚Üê 1, k execute\nIf nr MOD 10 > 0 then\nnr ‚Üê nr DIV 10\nelse\nnr ‚Üê nr - 1\nEndIf\nEndFor\nreturn nr\nEndAlgorithm"
                },
                {
                    "D": "Algorithm decrementare(nr, k):\n    If k = 0 then\n        return nr\n    else\n        If k > nr MOD 10 then\n            nr1 ‚Üê nr DIV 10\n            return decrementare(nr1,   k - nr MOD 10 - 1)\n        else\n            return decrementare(nr - k, 0)\n        EndIf\n    EndIf\nEndAlgorithm"
                }
            ],
            "code": "",
            "index": 7
        },
        {
            "question": "Let us consider the  algorithm fn with the following parameter specification: an array v with n natural numbers ( v[1], v[2], ‚Ä¶, v[n]) and the integer number n (1 ‚â§ n ‚â§ 10000). Which of the following statements are true? ",
            "answers": [
                {
                    "A": "The algorithm returns the number of odd elements from vector v."
                },
                {
                    "B": "The algorithm returns the number of elements from vector v that are powers of 2."
                },
                {
                    "C": "The algorithm returns the number of elements from vector  v that contain only even digits."
                },
                {
                    "D": "The algorithm returns the number of  elements  from  vector  v that contain only odd digi ts."
                }
            ],
            "code": "Algorithm fn(v, n):\na ‚Üê 0\nFor i ‚Üê 1, n execute\nok ‚Üê True\nb ‚Üê v[i]\nWhile (b ‚â† 0) AND (ok = True) execute\nIf b MOD 2 = 1 then\nok ‚Üê False\nEndIf\nb ‚Üê b DIV 10\nEndWhile\nIf ok = True then\na ‚Üê a + 1\nEndIf\nEndFor\nreturn a\nEndAlgorithm",
            "index": 8
        },
        {
            "question": "  The algorithm  magic(s, n) has as input parameters an array s of n characters ( s[1], s[2], ‚Ä¶, s[n]) and the integer number n (1 ‚â§ n ‚â§ 10000). Which of the following statements are true?   ",
            "answers": [
                {
                    "A": "The algorithm returns 1 if s has an even number of characters."
                },
                {
                    "B": "The algorithm returns 1 if s is a palindrome."
                },
                {
                    "C": "The algorithm contains an error since the expression n ‚Äì i + 1 can have negative values during\nexecution."
                },
                {
                    "D": "The algorithm returns 1  if s contains only alphanumeric characters."
                }
            ],
            "code": "Algorithm magic(s, n):\n    i ‚Üê n\n    While 1 ‚â§ i execute\n        If s[i] ‚â† s[n - i + 1] then\n            return 0\n        EndIf\n        i ‚Üê i - 1\n    EndWhile\n    return 1\nEndAlgorithm",
            "index": 9
        },
        {
            "question": "Let us consider the following sequence of pseudocode statements : Read a For i ‚Üê 1, a - 1 execute     For j ‚Üê i + 2, a execute         If i + j > a - 1 then             Write a, \" \", i, \" \", j             Write new line         EndIf     EndFor EndFor How many pairs of solutions will be printed after executing the pseudocode sequence for a = 9? ",
            "answers": [
                {
                    "A": "13"
                },
                {
                    "B": "15"
                },
                {
                    "C": "19"
                },
                {
                    "D": "None of the other variants are correct ."
                }
            ],
            "code": "",
            "index": 10
        },
        {
            "question": " The a lgorit hm ceFace(n)  has as input parameter  a natural number  n (0 ‚â§ n ‚â§ 10000). What is the value returned by the call  ceFace(9876) ? ",
            "answers": [
                {
                    "A": "16"
                },
                {
                    "B": "48"
                },
                {
                    "C": "14"
                },
                {
                    "D": "63"
                }
            ],
            "code": "Algorithm ceFace(n):\ns ‚Üê 0\nWhile n > 0 execute\nc ‚Üê n MOD 10\nIf c MOD 2 = 0 then\ns ‚Üê s + c\nEndIf\nn ‚Üê n DIV 10\nEndWhile\nreturn s\nEndAlgorithm",
            "index": 11
        },
        {
            "question": "The algorithm generare(n)  processes a natural number n (0 < n < 100). Which of the following statements are true? ",
            "answers": [
                {
                    "A": "If n = 10, the algorithm returns 2."
                },
                {
                    "B": "If n = 10, the algorithm returns 1."
                },
                {
                    "C": "If n = 3, the algorithm returns 4."
                },
                {
                    "D": "The two calls generare(3)  and generare(30)  will return the same value."
                }
            ],
            "code": "Algorithm generare(n):\n    nr ‚Üê 0\n    For i ‚Üê 1, 1801 execute\n        used[i] ‚Üê False\n    EndFor\n    While not  used[n] execute\n        sum ‚Üê 0\n        used[n] ‚Üê True\n        While n ‚â† 0 execute\n            digit ‚Üê n MOD 10\n            n ‚Üê n DIV 10\n            sum ‚Üê sum + digit * digit * digit\n        EndWhile\n        n ‚Üê sum\n        nr ‚Üê nr + 1\n    EndWhile\n    return nr\nEndAlgorithm",
            "index": 12
        },
        {
            "question": "The algorithm f(a, b) has as input parameter s two natural number s a and b (1 ‚â§ a < b ‚â§ 100 0): Unfortunately, the algorithm calls itself recursively an infinite number of times. State what will be the value of b when variable a becomes 0  for the first time . The algorithm is called using the instruction: c ‚Üê f(20, 10) ",
            "answers": [
                {
                    "A": "100"
                },
                {
                    "B": "160"
                },
                {
                    "C": "320"
                },
                {
                    "D": "640"
                }
            ],
            "code": "Algorithm f(a, b):\nIf a > 0 then\nreturn b + f(a DIV 2, b * 2)\nEndIf\nreturn b + f(a * 2, b DIV 2)\nEndAlgorithm",
            "index": 13
        },
        {
            "question": "Which of the following expressions have the value true if and only if the natural number n is divisible by 3 and has the last digit 4 or 6: ",
            "answers": [
                {
                    "A": "(n MOD 3 = 0) OR ((n MOD 10 = 4) AND (n MOD 10 = 6))"
                },
                {
                    "B": "(n MOD 6 = 0) AND ((n MOD 10 = 4) OR (n MOD 10 = 6))"
                },
                {
                    "C": "((n MOD 9 = 0) AND (n MOD 10 = 4)) OR ((n MOD 3 = 0) AND (n MOD 10 = 6))"
                },
                {
                    "D": "(n MOD 3 = 0) AND (((n MOD 2 = 0) AND (n MOD 5 = 0)) OR ((n MOD 2 = 0) AND (n MOD 5 = 1)))"
                }
            ],
            "code": "",
            "index": 14
        },
        {
            "question": "Let us consider the following logical expression  (X OR Z) AND (X OR Y). Choose the values for X, Y, Z such that the evaluation of the expression gives the result True: ",
            "answers": [
                {
                    "A": "X ‚Üê False; Y ‚Üê False; Z ‚Üê True;"
                },
                {
                    "B": "X ‚Üê True; Y ‚Üê False; Z ‚Üê False;"
                },
                {
                    "C": "X ‚Üê False; Y ‚Üê True; Z ‚Üê False;"
                },
                {
                    "D": "X ‚Üê True; Y ‚Üê True; Z ‚Üê True;"
                }
            ],
            "code": "",
            "index": 15
        },
        {
            "question": "Consider all strings of length l œµ {1, 2, 3} consisting of letters in the set { a, b, c, d, e}. How many of these strings have elements ordered  in strictly ascending  order  and also having an odd number of consonants? ( b, c and d are consonants) ",
            "answers": [
                {
                    "A": "14"
                },
                {
                    "B": "13"
                },
                {
                    "C": "26"
                },
                {
                    "D": "81"
                }
            ],
            "code": "",
            "index": 16
        },
        {
            "question": " In order to display a square together with  its diagonals, we will use the characters * (asterisk) and . (dot) (for the space inside the square except the diagonals). The following example displays a square having a side of n = 6 asterisks. For this representation, 28 asterisks and 8 dots were required. * * * * * * * * . . * * * . * * . * * . * * . * * * . . * * * * * * * * Which of the following statements are true? ",
            "answers": [
                {
                    "A": "For n = 5, precisely 22 asterisks and 4 dots  are required ."
                },
                {
                    "B": "For n = 7, precisely 34 asterisks and 15 dots  are required ."
                },
                {
                    "C": "For n = 7, precisely 33 asterisks and 16 dots  are required ."
                },
                {
                    "D": "For n = 18, precisely 100 asterisks and 224 dots  are required ."
                }
            ],
            "code": "",
            "index": 17
        },
        {
            "question": "Let us consider the algorithm ceFace(T, n, e) , having as a parameter an array T of n natural numbers in ascending order ( T[1], T[2], ‚Ä¶, T[n]) and natural numbers n and e (1 ‚â§ n, e ‚â§ 10000).     Which of the following statements are true? ",
            "answers": [
                {
                    "A": "The algorithm returns 0 if number e does not belong to the array T."
                },
                {
                    "B": "If the number e is odd and belongs to the array T, the algorithm returns the index of e in T using the\nbinary search algorithm."
                },
                {
                    "C": "If the number e is odd and belongs to the array T, the algorithm returns the index of e in T using the\nsequential search algorithm."
                },
                {
                    "D": "The algorithm returns the index of e in T."
                }
            ],
            "code": "Algorithm ceFace(T,  n, e):\n    If e MOD 2 = 0 then\n        a ‚Üê 1\n        b ‚Üê n\n        While a ‚â§ b execute\n            m ‚Üê (a + b) DIV 2\n            If e < T[m] then\n                b ‚Üê m - 1\n            else\n                If e > T[m] then\n                    a ‚Üê m + 1\n                else\n                    return m\n                EndIf\n            EndIf\n        EndWhile\n        return 0\n    else\n        c ‚Üê 1\n        g ‚Üê 0\n        While (c ‚â§ n) AND (g = 0) execute\n            If e = T[c] then\n                g = c\n            EndIf\n            c ‚Üê c + 1\n        EndWhile\n        return g\n    EndIf\nEndAlgorithm",
            "index": 18
        },
        {
            "question": " 19. Let us consider the algorithm calcul(x, n) , where the input parameters are the natural numbers n and x (1 ‚â§ x ‚â§ n < 10). Which of the following statements are true? ",
            "answers": [
                {
                    "A": "If n = 5 and x = 2, the algorithm returns 20."
                },
                {
                    "B": "If n = 3 and x = 2, the algorithm returns  5."
                },
                {
                    "C": "The algorithm returns the cardinality of the set { ùëê1ùëê2‚Ä¶ùëêùë•  : ci ‚â† cj ‚àÄ 1 ‚â§ i, j ‚â§ x, i ‚â† j, 1 ‚â§ ci ‚â§ n}"
                },
                {
                    "D": "The algorithm always returns a value strictly gr eater then 0."
                }
            ],
            "code": "Algorithm calcul(x, n):\nb ‚Üê 1\nFor i ‚Üê 1, n - x execute\nb ‚Üê b + i\nEndFor\na ‚Üê b\nFor i ‚Üê n ‚Äì x + 1, n execute\na ‚Üê a + i\nEndFor\nreturn a - b\nEndAlgorithm",
            "index": 19
        },
        {
            "question": "Let us consider the algorithm s(a, b, c),  where a, b, c are positive natural numbers (1 ‚â§ a, b, c ‚â§ 10000). ",
            "answers": [],
            "code": "Algorithm s(a, b, c):\n    If (a = 1) OR (b = 1) OR (c = 1) then\n        return 1\n    else\n        If a > b then\n            return a * s(a - 1, b, c)\n         else\n             If a < b then\n                return b * s(a, b - 1, c)\n            else\n                return c * s(a - 1, b - 1, c - 1)\n            EndIf\n        EndIf\n    EndIf\nEndAlgorithm",
            "index": 20
        },
        {
            "question": "20a. Which of the following statements are true when  a = b and a < c? ",
            "answers": [
                {
                    "A": "The algorithm computes and returns c! / (c - a)!"
                },
                {
                    "B": "The algorithm computes and returns  c! / (c ‚Äì a + 1)!"
                },
                {
                    "C": "The algorithm computes and returns  c! / (c ‚Äì a - 1)!"
                },
                {
                    "D": "The algorithm computes and returns the number of combinations of c taken (a - 1) at a time"
                }
            ],
            "code": "",
            "index": 21
        },
        {
            "question": "20b. Given  a = 3, b = 4, c = 7, the algorit hm returns : ",
            "answers": [
                {
                    "A": "224"
                },
                {
                    "B": "56"
                },
                {
                    "C": "336"
                },
                {
                    "D": "168"
                }
            ],
            "code": "",
            "index": 22
        },
        {
            "question": " Let us consider the algorithm  numere(a, b, c, d, e) , which receive s as input parameters five integer numbers  a, b, c, d and e (1 ‚â§ a, b ‚â§ 10000, 2 ‚â§ c ‚â§ 16, 1 ‚â§ d < c). Which of the following statements are true  when  calling numere(a, b, c, d, 0) ? ",
            "answers": [
                {
                    "A": "The algorithm returns True  if the representations in base c of the numbers a and b contain the\ndigit d occurring an equal number of times and False  otherwise"
                },
                {
                    "B": "The algorithm  returns True if digit d occurs  in the base c representation of the number a and in\nthe base c representation of the number b, False  otherwise"
                },
                {
                    "C": "Calling numere(a, b, c, d, 0)  returns the same value as when calling numere(b, a, c, d, 0)"
                },
                {
                    "D": "The algorithm  returns True if the digit d occurs on the same positions in the base c representation\nof the numbers a and b and False otherwise"
                }
            ],
            "code": "Algorithm numere(a, b, c, d, e):\nIf a = 0 AND b = 0 then\nIf e = 0 then\nreturn True\nelse\nreturn False\nEndIf\nEndIf\nIf a MOD c = d then\ne = e + 1\nEndIf\nIf b MOD c = d then\ne = e ‚Äì 1\nEndIf\nreturn numere(a DIV c, b DIV c, c, d, e)\nEndAlgorithm",
            "index": 23
        },
        {
            "question": "Let us consider the array s of natural numbers where: si = {ùë•,                       if ùëñ=1 ùë•+1,               if ùëñ=2 ùë†(ùëñ‚àí1)@ùë†(ùëñ‚àí2)  if ùëñ>2   , (i = 1, 2, ...). The operator @ concatenates the digits from the left and right operands, in this order (the digits of base 10 representation), and x is a natural number (1 ‚â§ x ‚â§ 99). For example, if x = 3, the array s is 3, 4, 43, 434, 43443, ... . For a na tural number k (1 ‚â§ k ‚â§ 30) state the number of digits of the item in  s that precedes the item having  k1 digits, where k1 is the lowest number where k ‚â§ k1 ‚â§ 30 and there exists an item having k1 digits. ",
            "answers": [
                {
                    "A": "for x = 15 and k = 8, the number of digits of the desired item is 6."
                },
                {
                    "B": "for x = 2 »ôi k = 6, the number of digits of the desired item is 6."
                },
                {
                    "C": "for x = 14 »ôi k = 27, the number of digits of the desired item is 26."
                },
                {
                    "D": "for x = 5 »ôi k = 12, the number of digits of the desired item is 8."
                }
            ],
            "code": "",
            "index": 24
        },
        {
            "question": " Let us consider the following  recursive algorithm  fibonacci(n) , where n is a natural number (1 ‚â§ n ‚â§ 100).   Determine  the number of times that  the message  ‚ÄúAici‚Äù is displayed for a call of  fibonacci(n ). ",
            "answers": [
                {
                    "A": "fibonacci(n)  number of times ."
                },
                {
                    "B": "fibonacci(n -1) number of times."
                },
                {
                    "C": "fibonacci(n) -1 number of times."
                },
                {
                    "D": "fibonacci(n) - fibonacci(n -1) number of times."
                }
            ],
            "code": "Algorithm fibonacci(n):\n    If n ‚â§ 1 then\n        Write \"Aici\"\n        return 1\n    else\n        return fibonacci(n  - 1) + fibonacci(n  - 2)\n    EndIf\nEndAlgorithm",
            "index": 25
        },
        {
            "question": " 24.   Consider the expression : E(x) = a0 + a 1*x + a2*x2 + a3*x3 + a4*x4, where a0, a1, a2, a3, a4 and x are non-zero real numbers . The minimum number of multiplications needed to compute the value of the expression E(x) is: ",
            "answers": [
                {
                    "A": "4"
                },
                {
                    "B": "5"
                },
                {
                    "C": "7"
                },
                {
                    "D": "3"
                }
            ],
            "code": "",
            "index": 26
        },
        {
            "question": "Let us consider the algorithm  f(x, n)  where x, n are natural numbers and x > 0. ",
            "answers": [],
            "code": "Algorithm f(x, n):\n2.      If n = 0 then\n3.          return 1\n4.      EndIf\n5.      m ‚Üê n DIV 2\n6.      p ‚Üê f(x, m)\n7.      If n MOD 2 = 0 then\n8.          return p * p\n9.      EndIf\n10.     return x * p * p\nEndAlgorithm",
            "index": 27
        },
        {
            "question": "25a. Which of the following statements are true? ",
            "answers": [
                {
                    "A": "The algorithm returns xn running approximately n recursive calls."
                },
                {
                    "B": "The algorithm returns xn making  approximately log 2 n recursive calls."
                },
                {
                    "C": "The algorithm returns xn if and only if n is a power of 2"
                },
                {
                    "D": "The algorithm returns xn if and only if n is even."
                }
            ],
            "code": "",
            "index": 28
        },
        {
            "question": "25b. Let us consider line 10 replaced with: 10.     return x * f(x, n ‚Äì 1) Which of the following statements are true? ",
            "answers": [
                {
                    "A": "The algorithm does not return xn anymore"
                },
                {
                    "B": "The algorithm returns xn+1"
                },
                {
                    "C": "The algorithm runs approximately n2 recursive calls."
                },
                {
                    "D": "The algorithm returns xn"
                }
            ],
            "code": "",
            "index": 29
        },
        {
            "question": "Let us consider the algorithm f2(a,b)  having parameters a and b natural numbers, and the algorithm f(arr, i, n, p)  having as parameters the array arr with n integers ( arr[1], arr[2], ‚Ä¶, arr[n]), and the integers i and p. Algorithm f(arr, i, n, p): If i = n then return 0 EndIf n1 ‚Üê f(arr, i + 1, n, p) n2 ‚Üê 0 If p + 1 ‚â† i then n2 ‚Üê f(arr, i + 1, n, i) + arr[i] EndIf return f2(n1, n2) EndAlgorithm State which is the result of calling f(arr, 1, 9, -10), if the array arr has the values (10, 1, 5, 4, 7, 12, 1, 12, 6). ",
            "answers": [
                {
                    "A": "24"
                },
                {
                    "B": "37"
                },
                {
                    "C": "39"
                },
                {
                    "D": "56"
                }
            ],
            "code": "Algorithm f2(a, b):\n    If a > b then\n        return a\n    else\n        return b\n    EndIf\nEndAlgorithm",
            "index": 30
        },
        {
            "question": "Let us consider the algorithm f(n), having as a parameter the nonzero natural number n which returns a natural number . ",
            "answers": [],
            "code": "Algorithm f(n):\n j ‚Üê n\n While j > 1 execute\n  i ‚Üê 1\n  While i ‚â§ n4 execute\n   i ‚Üê 4 * i\n   Write \"*\"\n  EndWhile\n  If j DIV 2 > 1 then\n   Write \" \"\n  EndIf\n  j ‚Üê j DIV 2\n EndWhile\n return j\nEndAlgorithm",
            "index": 31
        },
        {
            "question": "27a. The time complexity of the algorithm belongs to which of the following complexity class es? ",
            "answers": [
                {
                    "A": "O(log 2 n)"
                },
                {
                    "B": "O(log 22 ùíè)"
                },
                {
                    "C": "O(log 42 ùíè)"
                },
                {
                    "D": "O(log 2 log 4 n)"
                }
            ],
            "code": "",
            "index": 32
        },
        {
            "question": "27b. Which of the following statements are true? ",
            "answers": [
                {
                    "A": "If n = 10, the algorithm displays groups of 7 asterisks, groups being separated by a space."
                },
                {
                    "B": "If n = 20, the algorithm displays  4 groups of asterisks  and 4 space characters."
                },
                {
                    "C": "If n = 25, the algorithm displays  48 asterisks , and after each group displays one spac e."
                },
                {
                    "D": "If n = 100, the algorithm displays  84 asterisks and  5 space characters."
                }
            ],
            "code": "",
            "index": 33
        }
    ]
]